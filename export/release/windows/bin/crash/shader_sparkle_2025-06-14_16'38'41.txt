[openfl.display.Shader] ERROR: Error compiling fragment shader
0(79) : warning C1503: undefined variable "hash43"
0(92) : warning C1503: undefined variable "sdStar"
0(97) : warning C1503: undefined variable "hsl2rgb"
0(112) : warning C1503: undefined variable "hash32"
0(116) : warning C1503: undefined variable "hash12"
0(118) : warning C1503: undefined variable "hash12"
0(119) : warning C1503: undefined variable "hash12"
0(120) : warning C1503: undefined variable "hash12"
0(121) : warning C1503: undefined variable "hash12"
0(123) : warning C1503: undefined variable "hash12"
0(124) : warning C1503: undefined variable "hash12"
0(125) : warning C1503: undefined variable "hash12"
0(126) : warning C1503: undefined variable "hash12"
0(131) : warning C7527: OpenGL requires main to take no parameters
0(138) : warning C1503: undefined variable "hash32"
0(79) : error C1008: undefined variable "hash43"
0(92) : error C1008: undefined variable "sdStar"
0(97) : error C1008: undefined variable "hsl2rgb"
0(112) : error C1008: undefined variable "hash32"
0(116) : error C1008: undefined variable "hash12"
0(118) : error C1008: undefined variable "hash12"
0(119) : error C1008: undefined variable "hash12"
0(120) : error C1008: undefined variable "hash12"
0(121) : error C1008: undefined variable "hash12"
0(123) : error C1008: undefined variable "hash12"
0(124) : error C1008: undefined variable "hash12"
0(125) : error C1008: undefined variable "hash12"
0(126) : error C1008: undefined variable "hash12"
0(138) : error C1008: undefined variable "hash32"

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#endif

varying float openfl_Alphav;
		varying vec4 openfl_ColorMultiplierv;
		varying vec4 openfl_ColorOffsetv;
		varying vec2 openfl_TextureCoordv;

		uniform bool openfl_HasColorTransform;
		uniform vec2 openfl_TextureSize;
		uniform sampler2D bitmap;

		uniform bool hasTransform;
		uniform bool hasColorTransform;

		vec4 flixel_texture2D(sampler2D bitmap, vec2 coord)
		{
			vec4 color = texture2D(bitmap, coord);

			if (!hasTransform)
			{
				return color;
			}

			if (color.a == 0.0)
			{
				return vec4(0.0, 0.0, 0.0, 0.0);
			}

			if (!hasColorTransform)
			{
				return color * openfl_Alphav;
			}

			color = vec4(color.rgb / color.a, color.a);

			mat4 colorMultiplier = mat4(0);
			colorMultiplier[0][0] = openfl_ColorMultiplierv.x;
			colorMultiplier[1][1] = openfl_ColorMultiplierv.y;
			colorMultiplier[2][2] = openfl_ColorMultiplierv.z;
			colorMultiplier[3][3] = openfl_ColorMultiplierv.w;

			color = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);

			if (color.a > 0.0)
			{
				return vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);
			}

			return vec4(0.0, 0.0, 0.0, 0.0);
		}
vec2 uv = openfl_TextureCoordv.xy;
vec2 fragCoord = openfl_TextureCoordv*openfl_TextureSize;
vec2 iResolution = openfl_TextureSize;
uniform float iTime;
#define iChannel0 bitmap
#define texture flixel_texture2D
#define fragColor gl_FragColor
#define mainImage main

#define SPLAT_MULT 4

vec2 rotateUV(in vec2 uv, in float rot) {
    vec3 t = vec3(sin(rot), cos(rot), 0.0);
    t.z = -t.x;
    uv = t.yy * uv.xy + t.xz * uv.yx;
    return uv;
}

vec3 sparkle(in vec2 p, in vec2 cell, in float phase) {
    //vec2 uv = (p - 0.5) * 0.5;
    vec2 uv = p - 1.0;

    vec4 rand = hash43(vec3(cell, floor((phase + 1.0) / 2.0)));

    float rot = rand.w + sign(rand.w - 0.5) * phase * 1.3;
    //float rot = 0.0;

    vec2 offset = rand.yz * 0.7;
    uv = rotateUV(uv + offset, rot);

    float size = rand.x;
    float sizeMod = 0.5 * cos(phase * 3.14159265358979) + 0.5;
    size *= sizeMod;


    float d = sdStar(uv, 0.4 * size, 4.0, 0.6 - sizeMod * 0.3);


    float star = smoothstep(-0.01, -0.02, d);
    float glow = smoothstep(-0.1 + sizeMod * 0.2, -0.1, d) * 0.15;
    vec3 col_a = hsl2rgb(fract(phase * 1.4), 1.0, 0.6);
    vec3 col_b = vec3(1.0, 1.0, 1.0);
    
    vec3 col = mix(col_a, col_b, sizeMod);
    
    //return colorize(d);
    return col * vec3(star + glow);
}

vec3 sparkleLayer(in vec2 uv, in vec2 vel, in float phase) {
    uv = uv + vel * iTime;

    vec2 splatuv = fract(uv * float(SPLAT_MULT) / 2.0);
    vec2 cell = floor(uv * float(SPLAT_MULT) / 2.0);
    
    vec3 cellRand = hash32(cell);
    
    float speed = 2.0;
    
    vec3 col = sparkle(splatuv, cell, speed * iTime + hash12(cell) * 4.0 + phase);
    
    col += sparkle(splatuv - vec2( 1, 0), cell + vec2( 1, 0), speed * iTime + hash12(cell + vec2( 1, 0)) * 4.0 + phase);
    col += sparkle(splatuv - vec2(-1, 0), cell + vec2(-1, 0), speed * iTime + hash12(cell + vec2(-1, 0)) * 4.0 + phase);
    col += sparkle(splatuv - vec2( 0, 1), cell + vec2( 0, 1), speed * iTime + hash12(cell + vec2( 0, 1)) * 4.0 + phase);
    col += sparkle(splatuv - vec2( 0,-1), cell + vec2( 0,-1), speed * iTime + hash12(cell + vec2( 0,-1)) * 4.0 + phase);
    
    col += sparkle(splatuv - vec2( 1, 1), cell + vec2( 1, 1), speed * iTime + hash12(cell + vec2( 1, 1)) * 4.0 + phase);
    col += sparkle(splatuv - vec2(-1, 1), cell + vec2(-1, 1), speed * iTime + hash12(cell + vec2(-1, 1)) * 4.0 + phase);
    col += sparkle(splatuv - vec2(-1,-1), cell + vec2(-1,-1), speed * iTime + hash12(cell + vec2(-1,-1)) * 4.0 + phase);
    col += sparkle(splatuv - vec2( 1,-1), cell + vec2( 1,-1), speed * iTime + hash12(cell + vec2( 1,-1)) * 4.0 + phase);
    
    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.yy * 2.0;
    
    vec2 splatuv = fract(uv * float(SPLAT_MULT) / 2.0);
    vec2 cell = floor(uv * float(SPLAT_MULT) / 2.0);
    
    vec3 cellRand = hash32(cell);
    
    vec3 col = sparkleLayer(uv, vec2(0.2, 0.1), 0.0);
    col += sparkleLayer(uv, vec2(-0.01, -0.13), 1.0);
    col += sparkleLayer(uv, vec2(-0.06, 0.2), 2.0);

    fragColor = vec4(col, 1.0);
}
