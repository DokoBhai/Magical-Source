// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_MenuCharacter
#include <objects/MenuCharacter.h>
#endif
#ifndef INCLUDED_objects_MenuItem
#include <objects/MenuItem.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_GameplayChangersSubstate
#include <options/GameplayChangersSubstate.h>
#endif
#ifndef INCLUDED_states_ErrorState
#include <states/ErrorState.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_states_editors_WeekEditorState
#include <states/editors/WeekEditorState.h>
#endif
#ifndef INCLUDED_substates_ResetScoreSubState
#include <substates/ResetScoreSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb97520c7169a052_18_new,"states.StoryMenuState","new",0x0cdc887b,"states.StoryMenuState.new","states/StoryMenuState.hx",18,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_55_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",55,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_73_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",73,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_74_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",74,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_125_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",125,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_226_closeSubState,"states.StoryMenuState","closeSubState",0x7f462024,"states.StoryMenuState.closeSubState","states/StoryMenuState.hx",226,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_233_update,"states.StoryMenuState","update",0xb09890ce,"states.StoryMenuState.update","states/StoryMenuState.hx",233,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_323_selectWeek,"states.StoryMenuState","selectWeek",0x1c612655,"states.StoryMenuState.selectWeek","states/StoryMenuState.hx",323,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_381_selectWeek,"states.StoryMenuState","selectWeek",0x1c612655,"states.StoryMenuState.selectWeek","states/StoryMenuState.hx",381,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_395_changeDifficulty,"states.StoryMenuState","changeDifficulty",0xaeec22d0,"states.StoryMenuState.changeDifficulty","states/StoryMenuState.hx",395,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_431_changeWeek,"states.StoryMenuState","changeWeek",0x880ee6c9,"states.StoryMenuState.changeWeek","states/StoryMenuState.hx",431,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_528_weekIsLocked,"states.StoryMenuState","weekIsLocked",0xec61bd2d,"states.StoryMenuState.weekIsLocked","states/StoryMenuState.hx",528,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_534_updateText,"states.StoryMenuState","updateText",0x647f089b,"states.StoryMenuState.updateText","states/StoryMenuState.hx",534,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_21_boot,"states.StoryMenuState","boot",0x2c33e3b7,"states.StoryMenuState.boot","states/StoryMenuState.hx",21,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_29_boot,"states.StoryMenuState","boot",0x2c33e3b7,"states.StoryMenuState.boot","states/StoryMenuState.hx",29,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_38_boot,"states.StoryMenuState","boot",0x2c33e3b7,"states.StoryMenuState.boot","states/StoryMenuState.hx",38,0xbd7f4e34)
namespace states{

void StoryMenuState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_18_new)
HXLINE( 428)		this->intendedScore = 0;
HXLINE( 427)		this->lerpScore = 49324858;
HXLINE( 319)		this->stopspamming = false;
HXLINE( 318)		this->selectedWeek = false;
HXLINE( 317)		this->movedBack = false;
HXLINE(  52)		this->loadedWeeks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  35)		this->doko =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  30)		this->curDifficulty = 1;
HXLINE(  27)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,null());
HXDLIN(  27)		this->colorB = _hx_tmp->loadGraphic(::backend::Paths_obj::image(HX_("color/pooh",44,6c,70,eb),null(),null()),null(),null(),null(),null(),null());
HXLINE(  25)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),(( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )),null());
HXDLIN(  25)		this->book = _hx_tmp1->loadGraphic(::backend::Paths_obj::image(HX_("books/book_pooh",89,1e,3f,b7),null(),null()),null(),null(),null(),null(),null());
HXLINE(  18)		super::__construct();
            	}

Dynamic StoryMenuState_obj::__CreateEmpty() { return new StoryMenuState_obj; }

void *StoryMenuState_obj::_hx_vtable = 0;

Dynamic StoryMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StoryMenuState_obj > _hx_result = new StoryMenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StoryMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x18456883) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x18456883;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void StoryMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_55_create)
HXLINE(  56)		::backend::Paths_obj::clearStoredMemory();
HXLINE(  57)		::backend::Paths_obj::clearUnusedMemory();
HXLINE(  59)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  60)		::states::PlayState_obj::isStoryMode = true;
HXLINE(  61)		::backend::WeekData_obj::reloadWeekFiles(true);
HXLINE(  65)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null(),null());
HXLINE(  68)		if ((::backend::WeekData_obj::weeksList->length < 1)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_73_create)
HXLINE(  73)				::backend::MusicBeatState_obj::switchState( ::states::editors::WeekEditorState_obj::__alloc( HX_CTX ,null()));
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_74_create)
HXLINE(  74)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  70)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(  71)			this->persistentUpdate = false;
HXLINE(  72)			::backend::MusicBeatState_obj::switchState( ::states::ErrorState_obj::__alloc( HX_CTX ,HX_("NO WEEKS ADDED FOR STORY MODE\n\nPress ACCEPT to go to the Week Editor Menu.\nPress BACK to return to Main Menu.",f3,ad,ff,f0), ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1())));
HXLINE(  75)			return;
            		}
HXLINE(  78)		this->add(this->colorB);
HXLINE(  80)		this->book->setGraphicSize(1026,776);
HXLINE(  81)		{
HXLINE(  81)			 ::flixel::FlxSprite _this = this->book;
HXDLIN(  81)			int axes = 17;
HXDLIN(  81)			bool _hx_tmp;
HXDLIN(  81)			if ((axes != 1)) {
HXLINE(  81)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  81)				_hx_tmp = true;
            			}
HXDLIN(  81)			if (_hx_tmp) {
HXLINE(  81)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  81)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  81)			bool _hx_tmp2;
HXDLIN(  81)			if ((axes != 16)) {
HXLINE(  81)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  81)				_hx_tmp2 = true;
            			}
HXDLIN(  81)			if (_hx_tmp2) {
HXLINE(  81)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  81)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  82)		this->add(this->book);
HXLINE(  84)		if ((::states::StoryMenuState_obj::curWeek >= ::backend::WeekData_obj::weeksList->length)) {
HXLINE(  84)			::states::StoryMenuState_obj::curWeek = 0;
            		}
HXLINE(  86)		::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(1)->init(0,this->lerpScore);
HXDLIN(  86)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  86)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  86)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(HX_("high_score",75,a7,09,00),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  86)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = HX_("HIGH SCORE: {1}",0d,39,5f,f3);
            		}
HXLINE(  86)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = HX_("high_score",75,a7,09,00);
            		}
HXLINE(  86)		if (::hx::IsNotNull( values )) {
HXLINE(  86)			int _g_current = 0;
HXDLIN(  86)			::cpp::VirtualArray _g_array = values;
HXDLIN(  86)			while((_g_current < _g_array->get_length())){
HXLINE(  86)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  86)				_g_current = (_g_current + 1);
HXDLIN(  86)				int _g_key = (_g_current - 1);
HXDLIN(  86)				int num = _g_key;
HXDLIN(  86)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(  86)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,str,36,null());
HXLINE(  87)		 ::flixel::text::FlxText _hx_tmp4 = this->scoreText;
HXDLIN(  87)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  87)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  87)		::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  87)		if (::hx::IsNotNull( str1 )) {
HXLINE(  82)			key = str1;
            		}
HXLINE(  87)		::String folderKey = key;
HXDLIN(  87)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  87)		::String _hx_tmp5;
HXDLIN(  87)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  87)			_hx_tmp5 = file;
            		}
            		else {
HXLINE(  87)			_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  87)		_hx_tmp4->setFormat(_hx_tmp5,32,null(),null(),null(),null(),null());
HXLINE(  88)		 ::flixel::text::FlxText fh = this->scoreText;
HXDLIN(  88)		fh->set_x((fh->x + 700));
HXLINE(  89)		 ::flixel::text::FlxText fh1 = this->scoreText;
HXDLIN(  89)		fh1->set_y((fh1->y + 20));
HXLINE(  90)		this->scoreText->set_color(-256);
HXLINE(  91)		this->add(this->scoreText);
HXLINE(  93)		this->txtWeekTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE(  94)		 ::flixel::text::FlxText _hx_tmp6 = this->txtWeekTitle;
HXDLIN(  94)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  94)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  94)		::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  94)		if (::hx::IsNotNull( str2 )) {
HXLINE(  82)			key1 = str2;
            		}
HXLINE(  94)		::String folderKey1 = key1;
HXDLIN(  94)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN(  94)		::String _hx_tmp7;
HXDLIN(  94)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(  94)			_hx_tmp7 = file1;
            		}
            		else {
HXLINE(  94)			_hx_tmp7 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN(  94)		_hx_tmp6->setFormat(_hx_tmp7,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  95)		this->txtWeekTitle->set_alpha(((Float)0.7));
HXLINE(  97)		::String parentFolder = null();
HXDLIN(  97)		if ((HX_("campaign_menu_UI_assets",fd,f3,ba,6a).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  97)			::haxe::Log_obj::trace(HX_("campaign_menu_UI_assets",fd,f3,ba,6a), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  97)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("campaign_menu_UI_assets",fd,f3,ba,6a),parentFolder,true);
HXDLIN(  97)		bool xmlExists = false;
HXDLIN(  97)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  97)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 378)			xmlExists = true;
            		}
HXLINE(  97)		 ::Dynamic ui_tex;
HXDLIN(  97)		if (xmlExists) {
HXLINE(  97)			ui_tex = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  97)			::String key2 = (HX_("images/",77,50,74,c1) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a));
HXDLIN(  97)			::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN(  97)			::String str3 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN(  97)			if (::hx::IsNotNull( str3 )) {
HXLINE(  82)				key2 = str3;
            			}
HXLINE(  97)			ui_tex = ::backend::Paths_obj::getPath((key2 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  97)		 ::flixel::graphics::frames::FlxAtlasFrames ui_tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,ui_tex);
HXLINE(  98)		 ::flixel::FlxSprite bgYellow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null())->makeGraphic(::flixel::FlxG_obj::width,386,-405679,null(),null());
HXLINE(  99)		this->bgSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null());
HXLINE( 101)		this->grpWeekText =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 102)		this->add(this->grpWeekText);
HXLINE( 104)		 ::flixel::FlxSprite blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,56,-16777216,null(),null());
HXLINE( 105)		blackBarThingie->set_visible(false);
HXLINE( 106)		this->add(blackBarThingie);
HXLINE( 108)		this->grpWeekCharacters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 110)		this->grpLocks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 111)		this->add(this->grpLocks);
HXLINE( 113)		int num1 = 0;
HXLINE( 114)		Float itemTargetX = ( (Float)(0) );
HXLINE( 115)		Float baseX = (this->bgSprite->x + 146);
HXLINE( 116)		Float spacing = ( (Float)(120) );
HXLINE( 117)		{
HXLINE( 117)			int _g = 0;
HXDLIN( 117)			int _g1 = ::backend::WeekData_obj::weeksList->length;
HXDLIN( 117)			while((_g < _g1)){
HXLINE( 117)				_g = (_g + 1);
HXDLIN( 117)				int i = (_g - 1);
HXLINE( 119)				 ::backend::WeekData weekFile = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(::backend::WeekData_obj::weeksList->__get(i))) );
HXLINE( 120)				bool isLocked = this->weekIsLocked(::backend::WeekData_obj::weeksList->__get(i));
HXLINE( 121)				bool _hx_tmp8;
HXDLIN( 121)				if (isLocked) {
HXLINE( 121)					_hx_tmp8 = !(weekFile->hiddenUntilUnlocked);
            				}
            				else {
HXLINE( 121)					_hx_tmp8 = true;
            				}
HXDLIN( 121)				if (_hx_tmp8) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            					void _hx_run( ::objects::MenuItem item){
            						HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_125_create)
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 123)					this->loadedWeeks->push(weekFile);
HXLINE( 124)					::backend::WeekData_obj::setDirectoryFromWeek(weekFile);
HXLINE( 125)					 ::objects::MenuItem weekThing =  ::objects::MenuItem_obj::__alloc( HX_CTX ,(baseX + (( (Float)(num1) ) * spacing)),( (Float)(0) ),::backend::WeekData_obj::weeksList->__get(i), ::Dynamic(new _hx_Closure_2()));
HXLINE( 127)					weekThing->ID = num1;
HXLINE( 128)					weekThing->targetX = (weekThing->x + 500);
HXLINE( 129)					this->grpWeekText->add(weekThing).StaticCast<  ::objects::MenuItem >();
HXLINE( 131)					weekThing->set_x(( (Float)(920) ));
HXLINE( 132)					weekThing->set_y(( (Float)(50) ));
HXLINE( 135)					if (isLocked) {
HXLINE( 137)						Float lock = (weekThing->get_width() + 10);
HXDLIN( 137)						 ::flixel::FlxSprite lock1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(lock + weekThing->x),null(),null());
HXLINE( 138)						lock1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 139)						lock1->set_frames(ui_tex1);
HXLINE( 140)						lock1->animation->addByPrefix(HX_("lock",eb,9b,b7,47),HX_("lock",eb,9b,b7,47),null(),null(),null(),null());
HXLINE( 141)						lock1->animation->play(HX_("lock",eb,9b,b7,47),null(),null(),null());
HXLINE( 142)						lock1->ID = i;
HXLINE( 143)						this->grpLocks->add(lock1).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE( 145)					num1 = (num1 + 1);
            				}
            			}
            		}
HXLINE( 152)		::backend::WeekData_obj::setDirectoryFromWeek(this->loadedWeeks->__get(0).StaticCast<  ::backend::WeekData >());
HXLINE( 153)		::Array< ::String > charArray = this->loadedWeeks->__get(0).StaticCast<  ::backend::WeekData >()->weekCharacters;
HXLINE( 154)		{
HXLINE( 155)			{
HXLINE( 156)				 ::objects::MenuCharacter weekCharacterThing =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) - ( (Float)(150) )),charArray->__get(0));
HXLINE( 157)				weekCharacterThing->set_y((weekCharacterThing->y + 70));
HXLINE( 158)				weekCharacterThing->set_visible(false);
HXLINE( 159)				this->grpWeekCharacters->add(weekCharacterThing).StaticCast<  ::objects::MenuCharacter >();
            			}
HXLINE( 155)			{
HXLINE( 156)				 ::objects::MenuCharacter weekCharacterThing1 =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) * ( (Float)(2) )) - ( (Float)(150) )),charArray->__get(1));
HXLINE( 157)				weekCharacterThing1->set_y((weekCharacterThing1->y + 70));
HXLINE( 158)				weekCharacterThing1->set_visible(false);
HXLINE( 159)				this->grpWeekCharacters->add(weekCharacterThing1).StaticCast<  ::objects::MenuCharacter >();
            			}
HXLINE( 155)			{
HXLINE( 156)				 ::objects::MenuCharacter weekCharacterThing2 =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) * ( (Float)(3) )) - ( (Float)(150) )),charArray->__get(2));
HXLINE( 157)				weekCharacterThing2->set_y((weekCharacterThing2->y + 70));
HXLINE( 158)				weekCharacterThing2->set_visible(false);
HXLINE( 159)				this->grpWeekCharacters->add(weekCharacterThing2).StaticCast<  ::objects::MenuCharacter >();
            			}
            		}
HXLINE( 162)		this->difficultySelectors =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 163)		this->difficultySelectors->set_visible(false);
HXLINE( 165)		this->leftArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,850,(Dynamic( this->grpWeekText->members->__get(0)).StaticCast<  ::objects::MenuItem >()->y + 10),null());
HXLINE( 166)		this->leftArrow->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 167)		this->leftArrow->set_frames(ui_tex1);
HXLINE( 168)		this->leftArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow left",be,05,f8,94),null(),null(),null(),null());
HXLINE( 169)		this->leftArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push left",f6,7a,62,0c),null(),null(),null(),null());
HXLINE( 170)		this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 171)		this->difficultySelectors->add(this->leftArrow).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 173)		::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
HXLINE( 174)		if ((::states::StoryMenuState_obj::lastDifficultyName == HX_("",00,00,00,00))) {
HXLINE( 176)			::states::StoryMenuState_obj::lastDifficultyName = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 178)		this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::defaultList->indexOf(::states::StoryMenuState_obj::lastDifficultyName,null())) )));
HXLINE( 180)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->leftArrow->y,null());
HXLINE( 181)		this->sprDifficulty->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 182)		this->difficultySelectors->add(this->sprDifficulty).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 184)		this->rightArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->leftArrow->x + 376),this->leftArrow->y,null());
HXLINE( 185)		this->rightArrow->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 186)		this->rightArrow->set_frames(ui_tex1);
HXLINE( 187)		this->rightArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow right",45,0e,1a,3b),null(),null(),null(),null());
HXLINE( 188)		this->rightArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push right",0d,2a,d6,40),24,false,null(),null());
HXLINE( 189)		this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 190)		this->difficultySelectors->add(this->rightArrow).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 192)		this->add(this->grpWeekCharacters);
HXLINE( 194)		 ::flixel::FlxSprite _hx_tmp9 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.07)) + 350),(this->bgSprite->y + 175),null());
HXDLIN( 194)		this->tracksSprite = _hx_tmp9->loadGraphic(::backend::Paths_obj::image(HX_("Menu_Tracks",68,85,99,50),null(),null()),null(),null(),null(),null(),null());
HXLINE( 195)		this->tracksSprite->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 196)		 ::flixel::FlxSprite fh2 = this->tracksSprite;
HXDLIN( 196)		Float fh3 = fh2->x;
HXDLIN( 196)		fh2->set_x((fh3 - ((this->tracksSprite->get_width() / ( (Float)(2) )) + 30)));
HXLINE( 197)		this->add(this->tracksSprite);
HXLINE( 199)		this->txtTracklist =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05)),(this->tracksSprite->y + 60),0,HX_("",00,00,00,00),32,null());
HXLINE( 200)		this->txtTracklist->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 201)		 ::flixel::text::FlxText _hx_tmp10 = this->txtTracklist;
HXDLIN( 201)		::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 201)		::Dynamic this5 = ::backend::Language_obj::phrases;
HXDLIN( 201)		::String str4 = ( ( ::haxe::ds::StringMap)(this5) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 201)		if (::hx::IsNotNull( str4 )) {
HXLINE(  82)			key3 = str4;
            		}
HXLINE( 201)		::String folderKey2 = key3;
HXDLIN( 201)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 201)		::String _hx_tmp11;
HXDLIN( 201)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 201)			_hx_tmp11 = file2;
            		}
            		else {
HXLINE( 201)			_hx_tmp11 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 201)		_hx_tmp10->set_font(_hx_tmp11);
HXLINE( 202)		this->txtTracklist->set_color(-1747081);
HXLINE( 203)		this->add(this->txtTracklist);
HXLINE( 206)		 ::flixel::text::FlxText _hx_tmp12 = this->txtWeekTitle;
HXDLIN( 206)		Float _hx_tmp13 = this->txtTracklist->y;
HXDLIN( 206)		_hx_tmp12->set_y(((_hx_tmp13 + this->txtTracklist->get_height()) + 70));
HXLINE( 207)		this->txtWeekTitle->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 208)		this->add(this->txtWeekTitle);
HXLINE( 210)		 ::flixel::FlxSprite _hx_tmp14 = this->doko;
HXDLIN( 210)		::String parentFolder1 = null();
HXDLIN( 210)		if ((HX_("characters/m/pooh",ff,56,35,04).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 210)			::haxe::Log_obj::trace(HX_("characters/m/pooh",ff,56,35,04), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 210)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(HX_("characters/m/pooh",ff,56,35,04),parentFolder1,true);
HXDLIN( 210)		bool xmlExists1 = false;
HXDLIN( 210)		::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("characters/m/pooh",ff,56,35,04)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 210)		if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE( 378)			xmlExists1 = true;
            		}
HXLINE( 210)		 ::Dynamic _hx_tmp15;
HXDLIN( 210)		if (xmlExists1) {
HXLINE( 210)			_hx_tmp15 = ::sys::io::File_obj::getContent(xml1);
            		}
            		else {
HXLINE( 210)			::String key4 = (HX_("images/",77,50,74,c1) + HX_("characters/m/pooh",ff,56,35,04));
HXDLIN( 210)			::Dynamic this6 = ::backend::Language_obj::phrases;
HXDLIN( 210)			::String str5 = ( ( ::haxe::ds::StringMap)(this6) )->get_string(::StringTools_obj::trim(key4).toLowerCase());
HXDLIN( 210)			if (::hx::IsNotNull( str5 )) {
HXLINE(  82)				key4 = str5;
            			}
HXLINE( 210)			_hx_tmp15 = ::backend::Paths_obj::getPath((key4 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            		}
HXDLIN( 210)		_hx_tmp14->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp15));
HXLINE( 211)		this->doko->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Idle",34,d3,8c,30),24,true,null(),null());
HXLINE( 212)		this->doko->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 213)		this->doko->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 214)		this->doko->set_visible(true);
HXLINE( 215)		{
HXLINE( 215)			 ::flixel::FlxSprite _this1 = this->doko;
HXDLIN( 215)			int axes1 = 16;
HXDLIN( 215)			bool _hx_tmp16;
HXDLIN( 215)			if ((axes1 != 1)) {
HXLINE( 215)				_hx_tmp16 = (axes1 == 17);
            			}
            			else {
HXLINE( 215)				_hx_tmp16 = true;
            			}
HXDLIN( 215)			if (_hx_tmp16) {
HXLINE( 215)				int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN( 215)				_this1->set_x(((( (Float)(_hx_tmp17) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 215)			bool _hx_tmp18;
HXDLIN( 215)			if ((axes1 != 16)) {
HXLINE( 215)				_hx_tmp18 = (axes1 == 17);
            			}
            			else {
HXLINE( 215)				_hx_tmp18 = true;
            			}
HXDLIN( 215)			if (_hx_tmp18) {
HXLINE( 215)				int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN( 215)				_this1->set_y(((( (Float)(_hx_tmp19) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 216)		 ::flixel::FlxSprite fh4 = this->doko;
HXDLIN( 216)		fh4->set_x((fh4->x + 800));
HXLINE( 217)		this->doko->set_flipX(true);
HXLINE( 218)		this->add(this->doko);
HXLINE( 220)		this->changeWeek(null());
HXLINE( 221)		this->changeDifficulty(null());
HXLINE( 223)		this->super::create();
            	}


void StoryMenuState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_226_closeSubState)
HXLINE( 227)		this->persistentUpdate = true;
HXLINE( 228)		this->changeWeek(null());
HXLINE( 229)		this->super::closeSubState();
            	}


void StoryMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_233_update)
HXLINE( 234)		this->colorB->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 235)		{
HXLINE( 235)			 ::flixel::FlxSprite _this = this->colorB;
HXDLIN( 235)			int axes = 17;
HXDLIN( 235)			bool _hx_tmp;
HXDLIN( 235)			if ((axes != 1)) {
HXLINE( 235)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 235)				_hx_tmp = true;
            			}
HXDLIN( 235)			if (_hx_tmp) {
HXLINE( 235)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 235)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 235)			bool _hx_tmp2;
HXDLIN( 235)			if ((axes != 16)) {
HXLINE( 235)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 235)				_hx_tmp2 = true;
            			}
HXDLIN( 235)			if (_hx_tmp2) {
HXLINE( 235)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 235)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 236)		if ((::backend::WeekData_obj::weeksList->length < 1)) {
HXLINE( 238)			bool _hx_tmp4;
HXDLIN( 238)			bool _hx_tmp5;
HXDLIN( 238)			if (this->get_controls()->get_BACK()) {
HXLINE( 238)				_hx_tmp5 = !(this->movedBack);
            			}
            			else {
HXLINE( 238)				_hx_tmp5 = false;
            			}
HXDLIN( 238)			if (_hx_tmp5) {
HXLINE( 238)				_hx_tmp4 = !(this->selectedWeek);
            			}
            			else {
HXLINE( 238)				_hx_tmp4 = false;
            			}
HXDLIN( 238)			if (_hx_tmp4) {
HXLINE( 240)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::sound;
HXDLIN( 240)				_hx_tmp6->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 241)				this->movedBack = true;
HXLINE( 242)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            			}
HXLINE( 244)			this->super::update(elapsed);
HXLINE( 245)			return;
            		}
HXLINE( 249)		if ((this->intendedScore != this->lerpScore)) {
HXLINE( 251)			Float a = ( (Float)(this->intendedScore) );
HXDLIN( 251)			this->lerpScore = ::Math_obj::floor((a + (::Math_obj::exp((-(elapsed) * ( (Float)(30) ))) * (( (Float)(this->lerpScore) ) - a))));
HXLINE( 252)			if ((::Math_obj::abs(( (Float)((this->intendedScore - this->lerpScore)) )) < 10)) {
HXLINE( 252)				this->lerpScore = this->intendedScore;
            			}
HXLINE( 254)			 ::flixel::text::FlxText _hx_tmp7 = this->scoreText;
HXDLIN( 254)			::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(1)->init(0,this->lerpScore);
HXDLIN( 254)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 254)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 254)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(HX_("high_score",75,a7,09,00),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 254)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = HX_("HIGH SCORE: {1}",0d,39,5f,f3);
            			}
HXLINE( 254)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = HX_("high_score",75,a7,09,00);
            			}
HXLINE( 254)			if (::hx::IsNotNull( values )) {
HXLINE( 254)				int _g_current = 0;
HXDLIN( 254)				::cpp::VirtualArray _g_array = values;
HXDLIN( 254)				while((_g_current < _g_array->get_length())){
HXLINE( 254)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 254)					_g_current = (_g_current + 1);
HXDLIN( 254)					int _g_key = (_g_current - 1);
HXDLIN( 254)					int num = _g_key;
HXDLIN( 254)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 254)			_hx_tmp7->set_text(str);
            		}
HXLINE( 259)		bool _hx_tmp8;
HXDLIN( 259)		if (!(this->movedBack)) {
HXLINE( 259)			_hx_tmp8 = !(this->selectedWeek);
            		}
            		else {
HXLINE( 259)			_hx_tmp8 = false;
            		}
HXDLIN( 259)		if (_hx_tmp8) {
HXLINE( 261)			bool changeDiff = false;
HXLINE( 262)			if (this->get_controls()->get_UI_LEFT_P()) {
HXLINE( 264)				this->changeWeek(-1);
HXLINE( 265)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp9 = ::flixel::FlxG_obj::sound;
HXDLIN( 265)				_hx_tmp9->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 266)				changeDiff = true;
            			}
HXLINE( 269)			if (this->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 271)				this->changeWeek(1);
HXLINE( 272)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp10 = ::flixel::FlxG_obj::sound;
HXDLIN( 272)				_hx_tmp10->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 273)				changeDiff = true;
            			}
HXLINE( 276)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 278)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp11 = ::flixel::FlxG_obj::sound;
HXDLIN( 278)				_hx_tmp11->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 279)				this->changeWeek(-(::flixel::FlxG_obj::mouse->wheel));
HXLINE( 280)				this->changeDifficulty(null());
            			}
HXLINE( 283)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 283)			if (_this1->keyManager->checkStatusUnsafe(17,_this1->status)) {
HXLINE( 285)				this->persistentUpdate = false;
HXLINE( 286)				this->openSubState( ::options::GameplayChangersSubstate_obj::__alloc( HX_CTX ));
            			}
            			else {
HXLINE( 288)				if (this->get_controls()->get_RESET()) {
HXLINE( 290)					this->persistentUpdate = false;
HXLINE( 291)					this->openSubState( ::substates::ResetScoreSubState_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),this->curDifficulty,HX_("",00,00,00,00),::states::StoryMenuState_obj::curWeek));
            				}
            				else {
HXLINE( 294)					if (this->get_controls()->get_ACCEPT()) {
HXLINE( 295)						this->selectWeek();
            					}
            				}
            			}
            		}
HXLINE( 298)		bool _hx_tmp12;
HXDLIN( 298)		bool _hx_tmp13;
HXDLIN( 298)		if (this->get_controls()->get_BACK()) {
HXLINE( 298)			_hx_tmp13 = !(this->movedBack);
            		}
            		else {
HXLINE( 298)			_hx_tmp13 = false;
            		}
HXDLIN( 298)		if (_hx_tmp13) {
HXLINE( 298)			_hx_tmp12 = !(this->selectedWeek);
            		}
            		else {
HXLINE( 298)			_hx_tmp12 = false;
            		}
HXDLIN( 298)		if (_hx_tmp12) {
HXLINE( 300)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp14 = ::flixel::FlxG_obj::sound;
HXDLIN( 300)			_hx_tmp14->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 301)			this->movedBack = true;
HXLINE( 302)			::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            		}
HXLINE( 305)		this->super::update(elapsed);
HXLINE( 307)		Float offX = Dynamic( this->grpWeekText->members->__get(::states::StoryMenuState_obj::curWeek)).StaticCast<  ::objects::MenuItem >()->targetX;
HXLINE( 308)		{
HXLINE( 308)			int _g_current1 = 0;
HXDLIN( 308)			::Array< ::Dynamic> _g_array1 = this->grpWeekText->members;
HXDLIN( 308)			while((_g_current1 < _g_array1->length)){
HXLINE( 308)				 ::objects::MenuItem _g_value1 = _g_array1->__get(_g_current1).StaticCast<  ::objects::MenuItem >();
HXDLIN( 308)				_g_current1 = (_g_current1 + 1);
HXDLIN( 308)				int _g_key1 = (_g_current1 - 1);
HXDLIN( 308)				int num1 = _g_key1;
HXDLIN( 308)				 ::objects::MenuItem item = _g_value1;
HXLINE( 310)				Float a1 = ((item->targetX - offX) + 230);
HXDLIN( 310)				item->set_x((a1 + (::Math_obj::exp((-(elapsed) * ((Float)10.2))) * (item->x - a1))));
            			}
            		}
HXLINE( 313)		{
HXLINE( 313)			int _g_current2 = 0;
HXDLIN( 313)			::Array< ::Dynamic> _g_array2 = this->grpLocks->members;
HXDLIN( 313)			while((_g_current2 < _g_array2->length)){
HXLINE( 313)				 ::flixel::FlxSprite _g_value2 = _g_array2->__get(_g_current2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 313)				_g_current2 = (_g_current2 + 1);
HXDLIN( 313)				int _g_key2 = (_g_current2 - 1);
HXDLIN( 313)				int num2 = _g_key2;
HXDLIN( 313)				 ::flixel::FlxSprite lock = _g_value2;
HXLINE( 314)				Float _hx_tmp15 = Dynamic( this->grpWeekText->members->__get(lock->ID)).StaticCast<  ::objects::MenuItem >()->y;
HXDLIN( 314)				Float _hx_tmp16 = (_hx_tmp15 + (Dynamic( this->grpWeekText->members->__get(lock->ID)).StaticCast<  ::objects::MenuItem >()->get_height() / ( (Float)(2) )));
HXDLIN( 314)				lock->set_y((_hx_tmp16 - (lock->get_height() / ( (Float)(2) ))));
            			}
            		}
            	}


void StoryMenuState_obj::selectWeek(){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_323_selectWeek)
HXDLIN( 323)		if (!(this->weekIsLocked(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->fileName))) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_381_selectWeek)
HXLINE( 383)				::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),true,true));
HXLINE( 384)				::states::FreeplayState_obj::destroyFreeplayVocals();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 326)			::Array< ::String > songArray = ::Array_obj< ::String >::__new(0);
HXLINE( 327)			::cpp::VirtualArray leWeek = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->songs;
HXLINE( 328)			{
HXLINE( 328)				int _g = 0;
HXDLIN( 328)				int _g1 = leWeek->get_length();
HXDLIN( 328)				while((_g < _g1)){
HXLINE( 328)					_g = (_g + 1);
HXDLIN( 328)					int i = (_g - 1);
HXLINE( 329)					songArray->push(leWeek->__get(i)->__GetItem(0));
            				}
            			}
HXLINE( 333)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 335)				::states::PlayState_obj::storyPlaylist = songArray;
HXLINE( 336)				::states::PlayState_obj::isStoryMode = true;
HXLINE( 337)				this->selectedWeek = true;
HXLINE( 339)				 ::Dynamic num = this->curDifficulty;
HXDLIN( 339)				if (::hx::IsNull( num )) {
HXLINE( 339)					num = ::states::PlayState_obj::storyDifficulty;
            				}
HXDLIN( 339)				::String filePostfix = ::backend::Difficulty_obj::list->__get(( (int)(num) ));
HXDLIN( 339)				bool _hx_tmp;
HXDLIN( 339)				if (::hx::IsNotNull( filePostfix )) {
HXLINE( 339)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 339)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 339)					::String _hx_tmp1 = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXDLIN( 339)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 339)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 339)					_hx_tmp = (_hx_tmp1 != ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(::backend::Difficulty_obj::defaultDifficulty,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
            				}
            				else {
HXLINE( 339)					_hx_tmp = false;
            				}
HXDLIN( 339)				if (_hx_tmp) {
HXLINE( 339)					filePostfix = (HX_("-",2d,00,00,00) + filePostfix);
            				}
            				else {
HXLINE( 339)					filePostfix = HX_("",00,00,00,00);
            				}
HXDLIN( 339)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 339)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 339)				::String diffic = ::StringTools_obj::trim(hideChars2->replace(invalidChars2->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 340)				if (::hx::IsNull( diffic )) {
HXLINE( 340)					diffic = HX_("",00,00,00,00);
            				}
HXLINE( 342)				::states::PlayState_obj::storyDifficulty = this->curDifficulty;
HXLINE( 344)				::String _hx_tmp2 = (::states::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + diffic);
HXDLIN( 344)				::backend::Song_obj::loadFromJson(_hx_tmp2,::states::PlayState_obj::storyPlaylist->__get(0).toLowerCase());
HXLINE( 345)				::states::PlayState_obj::campaignScore = 0;
HXLINE( 346)				::states::PlayState_obj::campaignMisses = 0;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE( 348)					{
HXLINE( 348)						null();
            					}
HXDLIN( 348)					 ::Dynamic e = _g2;
HXLINE( 350)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 350)					::String _hx_tmp4 = (HX_("ERROR! ",87,5a,de,69) + ::Std_obj::string(e));
HXDLIN( 350)					_hx_tmp3(_hx_tmp4,::hx::SourceInfo(HX_("source/states/StoryMenuState.hx",28,99,e6,49),350,HX_("states.StoryMenuState",09,2f,42,21),HX_("selectWeek",10,d5,90,bd)));
HXLINE( 351)					return;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 354)			if ((this->stopspamming == false)) {
HXLINE( 356)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN( 356)				_hx_tmp5->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("confirmMenu",bf,8e,fe,3c)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 358)				Dynamic( this->grpWeekText->members->__get(::states::StoryMenuState_obj::curWeek)).StaticCast<  ::objects::MenuItem >()->set_isFlashing(true);
HXLINE( 359)				{
HXLINE( 359)					int _g3 = 0;
HXDLIN( 359)					::Array< ::Dynamic> _g4 = this->grpWeekCharacters->members;
HXDLIN( 359)					while((_g3 < _g4->length)){
HXLINE( 359)						 ::objects::MenuCharacter _hx_char = _g4->__get(_g3).StaticCast<  ::objects::MenuCharacter >();
HXDLIN( 359)						_g3 = (_g3 + 1);
HXLINE( 361)						bool _hx_tmp6;
HXDLIN( 361)						if ((_hx_char->character != HX_("",00,00,00,00))) {
HXLINE( 361)							_hx_tmp6 = _hx_char->hasConfirmAnimation;
            						}
            						else {
HXLINE( 361)							_hx_tmp6 = false;
            						}
HXDLIN( 361)						if (_hx_tmp6) {
HXLINE( 363)							_hx_char->animation->play(HX_("confirm",00,9d,39,10),null(),null(),null());
            						}
            					}
            				}
HXLINE( 366)				this->stopspamming = true;
            			}
HXLINE( 369)			::String directory = ::backend::StageData_obj::forceNextDirectory;
HXLINE( 370)			::states::LoadingState_obj::loadNextDirectory();
HXLINE( 371)			::backend::StageData_obj::forceNextDirectory = directory;
HXLINE( 374)			if ((::states::PlayState_obj::_lastLoadedModDirectory != ::backend::Mods_obj::currentModDirectory)) {
HXLINE( 376)				::haxe::Log_obj::trace(HX_("CHANGED MOD DIRECTORY, RELOADING STUFF",26,cc,2c,25),::hx::SourceInfo(HX_("source/states/StoryMenuState.hx",28,99,e6,49),376,HX_("states.StoryMenuState",09,2f,42,21),HX_("selectWeek",10,d5,90,bd)));
HXLINE( 377)				::backend::Paths_obj::freeGraphicsFromMemory();
            			}
HXLINE( 379)			::states::LoadingState_obj::prepareToSong();
HXLINE( 380)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 388)			::backend::DiscordClient_obj::loadModRPC();
            		}
            		else {
HXLINE( 391)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 391)			_hx_tmp7->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryMenuState_obj,selectWeek,(void))

void StoryMenuState_obj::changeDifficulty(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_395_changeDifficulty)
HXLINE( 396)		 ::states::StoryMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 396)		_hx_tmp->curDifficulty = (_hx_tmp->curDifficulty + change);
HXLINE( 398)		if ((this->curDifficulty < 0)) {
HXLINE( 399)			this->curDifficulty = (::backend::Difficulty_obj::list->length - 1);
            		}
HXLINE( 400)		if ((this->curDifficulty >= ::backend::Difficulty_obj::list->length)) {
HXLINE( 401)			this->curDifficulty = 0;
            		}
HXLINE( 403)		::backend::WeekData_obj::setDirectoryFromWeek(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >());
HXLINE( 405)		 ::Dynamic num = this->curDifficulty;
HXDLIN( 405)		 ::Dynamic canTranslate = false;
HXDLIN( 405)		if (::hx::IsNull( canTranslate )) {
HXLINE( 405)			canTranslate = true;
            		}
HXDLIN( 405)		 ::Dynamic diffName;
HXDLIN( 405)		if (::hx::IsNull( num )) {
HXLINE( 405)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE( 405)			diffName = num;
            		}
HXDLIN( 405)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN( 405)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 405)		::String diff;
HXDLIN( 405)		if (( (bool)(canTranslate) )) {
HXLINE( 405)			::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN( 405)			::cpp::VirtualArray values = null();
HXDLIN( 405)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 405)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 405)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 405)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = diffName1;
            			}
HXLINE( 405)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = key;
            			}
HXLINE( 405)			if (::hx::IsNotNull( values )) {
HXLINE( 405)				int _g_current = 0;
HXDLIN( 405)				::cpp::VirtualArray _g_array = values;
HXDLIN( 405)				while((_g_current < _g_array->get_length())){
HXLINE( 405)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 405)					_g_current = (_g_current + 1);
HXDLIN( 405)					int _g_key = (_g_current - 1);
HXDLIN( 405)					int num1 = _g_key;
HXDLIN( 405)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 405)			diff = str;
            		}
            		else {
HXLINE( 405)			diff = diffName1;
            		}
HXLINE( 406)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 406)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 406)		 ::flixel::graphics::FlxGraphic newImage = ::backend::Paths_obj::image((HX_("menudifficulties/",b7,09,b6,65) + ::StringTools_obj::trim(hideChars1->replace(invalidChars->replace(diff,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()),null(),null());
HXLINE( 409)		if (::hx::IsInstanceNotEq( this->sprDifficulty->graphic,newImage )) {
HXLINE( 411)			this->sprDifficulty->loadGraphic(newImage,null(),null(),null(),null(),null());
HXLINE( 412)			this->sprDifficulty->set_x((this->leftArrow->x + 60));
HXLINE( 413)			 ::flixel::FlxSprite fh = this->sprDifficulty;
HXDLIN( 413)			Float fh1 = fh->x;
HXDLIN( 413)			fh->set_x((fh1 + ((( (Float)(308) ) - this->sprDifficulty->get_width()) / ( (Float)(3) ))));
HXLINE( 414)			this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 415)			 ::flixel::FlxSprite _hx_tmp1 = this->sprDifficulty;
HXDLIN( 415)			Float _hx_tmp2 = this->leftArrow->y;
HXDLIN( 415)			_hx_tmp1->set_y(((_hx_tmp2 - this->sprDifficulty->get_height()) + 50));
HXLINE( 417)			::flixel::tweens::FlxTween_obj::cancelTweensOf(this->sprDifficulty,null());
HXLINE( 418)			::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(this->sprDifficulty->y + 30))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.07),null());
            		}
HXLINE( 420)		::states::StoryMenuState_obj::lastDifficultyName = diff;
HXLINE( 423)		this->intendedScore = ::backend::Highscore_obj::getWeekScore(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->fileName,this->curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,changeDifficulty,(void))

void StoryMenuState_obj::changeWeek(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_431_changeWeek)
HXLINE( 432)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::states::StoryMenuState >();
HXDLIN( 432)		::states::StoryMenuState_obj::curWeek = (::states::StoryMenuState_obj::curWeek + change);
HXLINE( 434)		if ((::states::StoryMenuState_obj::curWeek >= this->loadedWeeks->length)) {
HXLINE( 435)			::states::StoryMenuState_obj::curWeek = 0;
            		}
HXLINE( 436)		if ((::states::StoryMenuState_obj::curWeek < 0)) {
HXLINE( 437)			::states::StoryMenuState_obj::curWeek = (this->loadedWeeks->length - 1);
            		}
HXLINE( 439)		 ::backend::WeekData leWeek = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >();
HXLINE( 440)		::backend::WeekData_obj::setDirectoryFromWeek(leWeek);
HXLINE( 442)		::String key = (HX_("storyname_",9f,03,f9,3f) + leWeek->fileName);
HXDLIN( 442)		::String defaultPhrase = leWeek->storyName;
HXDLIN( 442)		::cpp::VirtualArray values = null();
HXDLIN( 442)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 442)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 442)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 442)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = defaultPhrase;
            		}
HXLINE( 442)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE( 442)		if (::hx::IsNotNull( values )) {
HXLINE( 442)			int _g_current = 0;
HXDLIN( 442)			::cpp::VirtualArray _g_array = values;
HXDLIN( 442)			while((_g_current < _g_array->get_length())){
HXLINE( 442)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 442)				_g_current = (_g_current + 1);
HXDLIN( 442)				int _g_key = (_g_current - 1);
HXDLIN( 442)				int num = _g_key;
HXDLIN( 442)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE( 442)		::String leName = str;
HXLINE( 444)		leName = ::StringTools_obj::replace(leName,HX_("/n",5f,29,00,00),HX_("\n",0a,00,00,00));
HXLINE( 445)		 ::flixel::text::FlxText _hx_tmp1 = this->txtWeekTitle;
HXDLIN( 445)		_hx_tmp1->set_text(leName.toUpperCase());
HXLINE( 446)		this->txtWeekTitle->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 447)		this->txtWeekTitle->set_x(this->txtTracklist->x);
HXLINE( 449)		bool unlocked = !(this->weekIsLocked(leWeek->fileName));
HXLINE( 450)		{
HXLINE( 450)			int _g_current1 = 0;
HXDLIN( 450)			::Array< ::Dynamic> _g_array1 = this->grpWeekText->members;
HXDLIN( 450)			while((_g_current1 < _g_array1->length)){
HXLINE( 450)				 ::objects::MenuItem _g_value1 = _g_array1->__get(_g_current1).StaticCast<  ::objects::MenuItem >();
HXDLIN( 450)				_g_current1 = (_g_current1 + 1);
HXDLIN( 450)				int _g_key1 = (_g_current1 - 1);
HXDLIN( 450)				int num1 = _g_key1;
HXDLIN( 450)				 ::objects::MenuItem item = _g_value1;
HXLINE( 451)				{
HXLINE( 452)					item->set_alpha(( (Float)(0) ));
HXLINE( 453)					bool _hx_tmp2;
HXDLIN( 453)					if (((num1 - ::states::StoryMenuState_obj::curWeek) == 0)) {
HXLINE( 453)						_hx_tmp2 = unlocked;
            					}
            					else {
HXLINE( 453)						_hx_tmp2 = false;
            					}
HXDLIN( 453)					if (_hx_tmp2) {
HXLINE( 454)						item->set_alpha(( (Float)(1) ));
            					}
            				}
            			}
            		}
HXLINE( 457)		this->bgSprite->set_visible(true);
HXLINE( 458)		int oof = 0;
HXLINE( 459)		int oof2 = 0;
HXLINE( 461)		::String assetName = leWeek->fileName;
HXLINE( 462)		::String assetName2 = leWeek->weekBackground;
HXLINE( 463)		::haxe::Log_obj::trace((HX_("DEBUG: assetName for book is: ",92,55,ed,3f) + assetName),::hx::SourceInfo(HX_("source/states/StoryMenuState.hx",28,99,e6,49),463,HX_("states.StoryMenuState",09,2f,42,21),HX_("changeWeek",84,95,3e,29)));
HXLINE( 464)		bool _hx_tmp3;
HXDLIN( 464)		if (::hx::IsNotNull( assetName2 )) {
HXLINE( 464)			_hx_tmp3 = (assetName2.length < 1);
            		}
            		else {
HXLINE( 464)			_hx_tmp3 = true;
            		}
HXDLIN( 464)		if (_hx_tmp3) {
HXLINE( 465)			 ::flixel::FlxSprite _hx_tmp4 = this->book;
HXDLIN( 465)			_hx_tmp4->loadGraphic(::backend::Paths_obj::image(HX_("books/book_pooh",89,1e,3f,b7),null(),null()),null(),null(),null(),null(),null());
HXLINE( 466)			this->book->set_visible(true);
HXLINE( 467)			 ::flixel::FlxSprite _hx_tmp5 = this->colorB;
HXDLIN( 467)			_hx_tmp5->loadGraphic(::backend::Paths_obj::image(HX_("color/debug",67,65,79,27),null(),null()),null(),null(),null(),null(),null());
HXLINE( 468)			this->colorB->set_visible(true);
HXLINE( 469)			this->colorB->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 470)			{
HXLINE( 470)				 ::flixel::FlxSprite _this = this->colorB;
HXDLIN( 470)				int axes = 17;
HXDLIN( 470)				bool _hx_tmp6;
HXDLIN( 470)				if ((axes != 1)) {
HXLINE( 470)					_hx_tmp6 = (axes == 17);
            				}
            				else {
HXLINE( 470)					_hx_tmp6 = true;
            				}
HXDLIN( 470)				if (_hx_tmp6) {
HXLINE( 470)					int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 470)					_this->set_x(((( (Float)(_hx_tmp7) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 470)				bool _hx_tmp8;
HXDLIN( 470)				if ((axes != 16)) {
HXLINE( 470)					_hx_tmp8 = (axes == 17);
            				}
            				else {
HXLINE( 470)					_hx_tmp8 = true;
            				}
HXDLIN( 470)				if (_hx_tmp8) {
HXLINE( 470)					int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 470)					_this->set_y(((( (Float)(_hx_tmp9) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 472)			oof = 0;
HXLINE( 473)			oof2 = 0;
HXLINE( 475)			 ::flixel::FlxSprite _hx_tmp10 = this->doko;
HXDLIN( 475)			::String parentFolder = null();
HXDLIN( 475)			if ((HX_("characters/m/BOYFRIEND bw",12,44,fd,5c).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 475)				::haxe::Log_obj::trace(HX_("characters/m/BOYFRIEND bw",12,44,fd,5c), ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            			}
HXDLIN( 475)			 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("characters/m/BOYFRIEND bw",12,44,fd,5c),parentFolder,true);
HXDLIN( 475)			bool xmlExists = false;
HXDLIN( 475)			::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("characters/m/BOYFRIEND bw",12,44,fd,5c)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 475)			if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 378)				xmlExists = true;
            			}
HXLINE( 475)			 ::Dynamic _hx_tmp11;
HXDLIN( 475)			if (xmlExists) {
HXLINE( 475)				_hx_tmp11 = ::sys::io::File_obj::getContent(xml);
            			}
            			else {
HXLINE( 475)				::String key1 = (HX_("images/",77,50,74,c1) + HX_("characters/m/BOYFRIEND bw",12,44,fd,5c));
HXDLIN( 475)				::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 475)				::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 475)				if (::hx::IsNotNull( str1 )) {
HXLINE(  82)					key1 = str1;
            				}
HXLINE( 475)				_hx_tmp11 = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            			}
HXDLIN( 475)			_hx_tmp10->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp11));
HXLINE( 476)			this->doko->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Idle",34,d3,8c,30),24,true,null(),null());
HXLINE( 477)			this->doko->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 478)			this->doko->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 479)			this->doko->set_visible(true);
            		}
            		else {
HXLINE( 481)			 ::flixel::FlxSprite _hx_tmp12 = this->book;
HXDLIN( 481)			_hx_tmp12->loadGraphic(::backend::Paths_obj::image((HX_("books/book_",31,b1,13,44) + assetName),null(),null()),null(),null(),null(),null(),null());
HXLINE( 482)			 ::flixel::FlxSprite _hx_tmp13 = this->colorB;
HXDLIN( 482)			_hx_tmp13->loadGraphic(::backend::Paths_obj::image((HX_("color/",6c,c5,86,c6) + assetName),null(),null()),null(),null(),null(),null(),null());
HXLINE( 483)			::haxe::Log_obj::trace((HX_("DEBUG: assetName for bg is: ",b6,fd,b1,70) + assetName),::hx::SourceInfo(HX_("source/states/StoryMenuState.hx",28,99,e6,49),483,HX_("states.StoryMenuState",09,2f,42,21),HX_("changeWeek",84,95,3e,29)));
HXLINE( 484)			this->colorB->set_visible(true);
HXLINE( 485)			this->colorB->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 486)			{
HXLINE( 486)				 ::flixel::FlxSprite _this1 = this->colorB;
HXDLIN( 486)				int axes1 = 17;
HXDLIN( 486)				bool _hx_tmp14;
HXDLIN( 486)				if ((axes1 != 1)) {
HXLINE( 486)					_hx_tmp14 = (axes1 == 17);
            				}
            				else {
HXLINE( 486)					_hx_tmp14 = true;
            				}
HXDLIN( 486)				if (_hx_tmp14) {
HXLINE( 486)					int _hx_tmp15 = ::flixel::FlxG_obj::width;
HXDLIN( 486)					_this1->set_x(((( (Float)(_hx_tmp15) ) - _this1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 486)				bool _hx_tmp16;
HXDLIN( 486)				if ((axes1 != 16)) {
HXLINE( 486)					_hx_tmp16 = (axes1 == 17);
            				}
            				else {
HXLINE( 486)					_hx_tmp16 = true;
            				}
HXDLIN( 486)				if (_hx_tmp16) {
HXLINE( 486)					int _hx_tmp17 = ::flixel::FlxG_obj::height;
HXDLIN( 486)					_this1->set_y(((( (Float)(_hx_tmp17) ) - _this1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 488)			if ((assetName == HX_("mal",98,0a,53,00))) {
HXLINE( 489)				oof = 450;
HXLINE( 490)				oof2 = -100;
HXLINE( 491)				this->doko->set_flipX(false);
HXLINE( 492)				{
HXLINE( 492)					 ::flixel::math::FlxBasePoint this3 = this->doko->scale;
HXDLIN( 492)					this3->set_x(((Float)0.53));
HXDLIN( 492)					this3->set_y(((Float)0.55));
            				}
            			}
            			else {
HXLINE( 494)				this->doko->set_flipX(true);
HXLINE( 495)				oof = 750;
HXLINE( 496)				oof2 = 100;
HXLINE( 497)				{
HXLINE( 497)					 ::flixel::math::FlxBasePoint this4 = this->doko->scale;
HXDLIN( 497)					this4->set_x(( (Float)(1) ));
HXDLIN( 497)					this4->set_y(( (Float)(1) ));
            				}
            			}
HXLINE( 500)			 ::flixel::FlxSprite _hx_tmp18 = this->doko;
HXDLIN( 500)			::String key2 = (HX_("characters/m/",a7,f6,3a,5a) + assetName);
HXDLIN( 500)			::String parentFolder1 = null();
HXDLIN( 500)			if ((key2.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 500)				::haxe::Log_obj::trace(key2, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            			}
HXDLIN( 500)			 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key2,parentFolder1,true);
HXDLIN( 500)			bool xmlExists1 = false;
HXDLIN( 500)			::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key2) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 500)			if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE( 378)				xmlExists1 = true;
            			}
HXLINE( 500)			 ::Dynamic _hx_tmp19;
HXDLIN( 500)			if (xmlExists1) {
HXLINE( 500)				_hx_tmp19 = ::sys::io::File_obj::getContent(xml1);
            			}
            			else {
HXLINE( 500)				::String key3 = (HX_("images/",77,50,74,c1) + key2);
HXDLIN( 500)				::Dynamic this5 = ::backend::Language_obj::phrases;
HXDLIN( 500)				::String str2 = ( ( ::haxe::ds::StringMap)(this5) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 500)				if (::hx::IsNotNull( str2 )) {
HXLINE(  82)					key3 = str2;
            				}
HXLINE( 500)				_hx_tmp19 = ::backend::Paths_obj::getPath((key3 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            			}
HXDLIN( 500)			_hx_tmp18->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp19));
HXLINE( 501)			this->doko->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Idle",34,d3,8c,30),24,true,null(),null());
HXLINE( 502)			this->doko->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 503)			this->doko->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 504)			this->doko->set_visible(true);
HXLINE( 505)			this->doko->set_x(( (Float)(oof) ));
HXLINE( 506)			this->doko->set_y(( (Float)(oof2) ));
            		}
HXLINE( 510)		::states::PlayState_obj::storyWeek = ::states::StoryMenuState_obj::curWeek;
HXLINE( 512)		{
HXLINE( 512)			 ::backend::WeekData week = null();
HXDLIN( 512)			if (::hx::IsNull( week )) {
HXLINE(  28)				week = ::backend::WeekData_obj::getCurrentWeek();
            			}
HXLINE( 512)			::String diffStr = week->difficulties;
HXDLIN( 512)			bool _hx_tmp20;
HXDLIN( 512)			if (::hx::IsNotNull( diffStr )) {
HXLINE( 512)				_hx_tmp20 = (diffStr.length > 0);
            			}
            			else {
HXLINE( 512)				_hx_tmp20 = false;
            			}
HXDLIN( 512)			if (_hx_tmp20) {
HXLINE( 512)				::Array< ::String > diffs = ::StringTools_obj::trim(diffStr).split(HX_(",",2c,00,00,00));
HXDLIN( 512)				int i = (diffs->length - 1);
HXDLIN( 512)				while((i > 0)){
HXLINE( 512)					if (::hx::IsNotNull( diffs->__get(i) )) {
HXLINE( 512)						diffs[i] = ::StringTools_obj::trim(diffs->__get(i));
HXDLIN( 512)						if ((diffs->__get(i).length < 1)) {
HXLINE( 512)							diffs->remove(diffs->__get(i));
            						}
            					}
HXDLIN( 512)					i = (i - 1);
            				}
HXDLIN( 512)				bool _hx_tmp21;
HXDLIN( 512)				if ((diffs->length > 0)) {
HXLINE( 512)					_hx_tmp21 = (diffs->__get(0).length > 0);
            				}
            				else {
HXLINE( 512)					_hx_tmp21 = false;
            				}
HXDLIN( 512)				if (_hx_tmp21) {
HXLINE( 512)					::backend::Difficulty_obj::list = diffs;
            				}
            			}
            			else {
HXLINE( 512)				::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
            			}
            		}
HXLINE( 513)		this->difficultySelectors->set_visible(unlocked);
HXLINE( 515)		if (::backend::Difficulty_obj::list->contains(::backend::Difficulty_obj::defaultDifficulty)) {
HXLINE( 516)			this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::defaultList->indexOf(::backend::Difficulty_obj::defaultDifficulty,null())) )));
            		}
            		else {
HXLINE( 518)			this->curDifficulty = 0;
            		}
HXLINE( 520)		int newPos = ::backend::Difficulty_obj::list->indexOf(::states::StoryMenuState_obj::lastDifficultyName,null());
HXLINE( 521)		if ((newPos > -1)) {
HXLINE( 523)			this->curDifficulty = newPos;
            		}
HXLINE( 525)		this->updateText();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,changeWeek,(void))

bool StoryMenuState_obj::weekIsLocked(::String name){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_528_weekIsLocked)
HXLINE( 529)		 ::backend::WeekData leWeek = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(name)) );
HXLINE( 530)		bool _hx_tmp;
HXDLIN( 530)		if (!(leWeek->startUnlocked)) {
HXLINE( 530)			_hx_tmp = (leWeek->weekBefore.length > 0);
            		}
            		else {
HXLINE( 530)			_hx_tmp = false;
            		}
HXDLIN( 530)		if (_hx_tmp) {
HXLINE( 530)			if (::states::StoryMenuState_obj::weekCompleted->exists(leWeek->weekBefore)) {
HXLINE( 530)				return !(::states::StoryMenuState_obj::weekCompleted->get_bool(leWeek->weekBefore));
            			}
            			else {
HXLINE( 530)				return true;
            			}
            		}
            		else {
HXLINE( 530)			return false;
            		}
HXDLIN( 530)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,weekIsLocked,return )

void StoryMenuState_obj::updateText(){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_534_updateText)
HXLINE( 535)		::Array< ::String > weekArray = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->weekCharacters;
HXLINE( 536)		{
HXLINE( 536)			int _g = 0;
HXDLIN( 536)			int _g1 = this->grpWeekCharacters->length;
HXDLIN( 536)			while((_g < _g1)){
HXLINE( 536)				_g = (_g + 1);
HXDLIN( 536)				int i = (_g - 1);
HXLINE( 537)				Dynamic( this->grpWeekCharacters->members->__get(i)).StaticCast<  ::objects::MenuCharacter >()->changeCharacter(weekArray->__get(i));
            			}
            		}
HXLINE( 540)		 ::backend::WeekData leWeek = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >();
HXLINE( 541)		::Array< ::String > stringThing = ::Array_obj< ::String >::__new(0);
HXLINE( 542)		{
HXLINE( 542)			int _g2 = 0;
HXDLIN( 542)			int _g3 = leWeek->songs->get_length();
HXDLIN( 542)			while((_g2 < _g3)){
HXLINE( 542)				_g2 = (_g2 + 1);
HXDLIN( 542)				int i1 = (_g2 - 1);
HXLINE( 543)				stringThing->push(leWeek->songs->__get(i1)->__GetItem(0));
            			}
            		}
HXLINE( 546)		this->txtTracklist->set_text(HX_("",00,00,00,00));
HXLINE( 547)		{
HXLINE( 547)			int _g4 = 0;
HXDLIN( 547)			int _g5 = stringThing->length;
HXDLIN( 547)			while((_g4 < _g5)){
HXLINE( 547)				_g4 = (_g4 + 1);
HXDLIN( 547)				int i2 = (_g4 - 1);
HXLINE( 549)				 ::flixel::text::FlxText fh = this->txtTracklist;
HXDLIN( 549)				fh->set_text((fh->text + (stringThing->__get(i2) + HX_("\n",0a,00,00,00))));
            			}
            		}
HXLINE( 552)		 ::flixel::text::FlxText _hx_tmp = this->txtTracklist;
HXDLIN( 552)		_hx_tmp->set_text(this->txtTracklist->text.toUpperCase());
HXLINE( 554)		{
HXLINE( 554)			 ::flixel::text::FlxText _this = this->txtTracklist;
HXDLIN( 554)			int axes = 1;
HXDLIN( 554)			bool _hx_tmp1;
HXDLIN( 554)			if ((axes != 1)) {
HXLINE( 554)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE( 554)				_hx_tmp1 = true;
            			}
HXDLIN( 554)			if (_hx_tmp1) {
HXLINE( 554)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 554)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 554)			bool _hx_tmp3;
HXDLIN( 554)			if ((axes != 16)) {
HXLINE( 554)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 554)				_hx_tmp3 = true;
            			}
HXDLIN( 554)			if (_hx_tmp3) {
HXLINE( 554)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 554)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 555)		this->txtTracklist->set_x(this->tracksSprite->x);
HXLINE( 556)		this->txtWeekTitle->set_x(this->txtTracklist->x);
HXLINE( 559)		this->intendedScore = ::backend::Highscore_obj::getWeekScore(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->fileName,this->curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryMenuState_obj,updateText,(void))

 ::haxe::ds::StringMap StoryMenuState_obj::weekCompleted;

::String StoryMenuState_obj::lastDifficultyName;

int StoryMenuState_obj::curWeek;


::hx::ObjectPtr< StoryMenuState_obj > StoryMenuState_obj::__new() {
	::hx::ObjectPtr< StoryMenuState_obj > __this = new StoryMenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< StoryMenuState_obj > StoryMenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	StoryMenuState_obj *__this = (StoryMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StoryMenuState_obj), true, "states.StoryMenuState"));
	*(void **)__this = StoryMenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StoryMenuState_obj::StoryMenuState_obj()
{
}

void StoryMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StoryMenuState);
	HX_MARK_MEMBER_NAME(tracksSprite,"tracksSprite");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(book,"book");
	HX_MARK_MEMBER_NAME(colorB,"colorB");
	HX_MARK_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_MARK_MEMBER_NAME(bgSprite,"bgSprite");
	HX_MARK_MEMBER_NAME(doko,"doko");
	HX_MARK_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_MARK_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_MARK_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_MARK_MEMBER_NAME(grpLocks,"grpLocks");
	HX_MARK_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(leftArrow,"leftArrow");
	HX_MARK_MEMBER_NAME(rightArrow,"rightArrow");
	HX_MARK_MEMBER_NAME(loadedWeeks,"loadedWeeks");
	HX_MARK_MEMBER_NAME(movedBack,"movedBack");
	HX_MARK_MEMBER_NAME(selectedWeek,"selectedWeek");
	HX_MARK_MEMBER_NAME(stopspamming,"stopspamming");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StoryMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tracksSprite,"tracksSprite");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(book,"book");
	HX_VISIT_MEMBER_NAME(colorB,"colorB");
	HX_VISIT_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_VISIT_MEMBER_NAME(bgSprite,"bgSprite");
	HX_VISIT_MEMBER_NAME(doko,"doko");
	HX_VISIT_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_VISIT_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_VISIT_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_VISIT_MEMBER_NAME(grpLocks,"grpLocks");
	HX_VISIT_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(leftArrow,"leftArrow");
	HX_VISIT_MEMBER_NAME(rightArrow,"rightArrow");
	HX_VISIT_MEMBER_NAME(loadedWeeks,"loadedWeeks");
	HX_VISIT_MEMBER_NAME(movedBack,"movedBack");
	HX_VISIT_MEMBER_NAME(selectedWeek,"selectedWeek");
	HX_VISIT_MEMBER_NAME(stopspamming,"stopspamming");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StoryMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"book") ) { return ::hx::Val( book ); }
		if (HX_FIELD_EQ(inName,"doko") ) { return ::hx::Val( doko ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colorB") ) { return ::hx::Val( colorB ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgSprite") ) { return ::hx::Val( bgSprite ); }
		if (HX_FIELD_EQ(inName,"grpLocks") ) { return ::hx::Val( grpLocks ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { return ::hx::Val( leftArrow ); }
		if (HX_FIELD_EQ(inName,"movedBack") ) { return ::hx::Val( movedBack ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { return ::hx::Val( rightArrow ); }
		if (HX_FIELD_EQ(inName,"selectWeek") ) { return ::hx::Val( selectWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeWeek") ) { return ::hx::Val( changeWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return ::hx::Val( updateText_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { return ::hx::Val( grpWeekText ); }
		if (HX_FIELD_EQ(inName,"loadedWeeks") ) { return ::hx::Val( loadedWeeks ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tracksSprite") ) { return ::hx::Val( tracksSprite ); }
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { return ::hx::Val( txtWeekTitle ); }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { return ::hx::Val( txtTracklist ); }
		if (HX_FIELD_EQ(inName,"selectedWeek") ) { return ::hx::Val( selectedWeek ); }
		if (HX_FIELD_EQ(inName,"stopspamming") ) { return ::hx::Val( stopspamming ); }
		if (HX_FIELD_EQ(inName,"weekIsLocked") ) { return ::hx::Val( weekIsLocked_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { return ::hx::Val( curDifficulty ); }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"changeDifficulty") ) { return ::hx::Val( changeDifficulty_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { return ::hx::Val( grpWeekCharacters ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { return ::hx::Val( difficultySelectors ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StoryMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curWeek") ) { outValue = ( curWeek ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"weekCompleted") ) { outValue = ( weekCompleted ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastDifficultyName") ) { outValue = ( lastDifficultyName ); return true; }
	}
	return false;
}

::hx::Val StoryMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"book") ) { book=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doko") ) { doko=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colorB") ) { colorB=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgSprite") ) { bgSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLocks") ) { grpLocks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { leftArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movedBack") ) { movedBack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { rightArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { grpWeekText=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loadedWeeks") ) { loadedWeeks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tracksSprite") ) { tracksSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { txtWeekTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { txtTracklist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedWeek") ) { selectedWeek=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopspamming") ) { stopspamming=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { grpWeekCharacters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { difficultySelectors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool StoryMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curWeek") ) { curWeek=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"weekCompleted") ) { weekCompleted=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastDifficultyName") ) { lastDifficultyName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void StoryMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tracksSprite",ad,d1,c0,2b));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("book",29,84,1b,41));
	outFields->push(HX_("colorB",7f,c5,86,c6));
	outFields->push(HX_("curDifficulty",db,b7,38,a7));
	outFields->push(HX_("txtWeekTitle",74,f4,3f,69));
	outFields->push(HX_("bgSprite",aa,c7,9c,98));
	outFields->push(HX_("doko",ef,ed,6d,42));
	outFields->push(HX_("txtTracklist",d9,6f,f5,3e));
	outFields->push(HX_("grpWeekText",c6,97,1f,d2));
	outFields->push(HX_("grpWeekCharacters",83,fc,76,59));
	outFields->push(HX_("grpLocks",03,78,f1,5b));
	outFields->push(HX_("difficultySelectors",b9,fa,53,88));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("leftArrow",42,68,6f,3a));
	outFields->push(HX_("rightArrow",4d,60,54,28));
	outFields->push(HX_("loadedWeeks",ba,8b,e0,c1));
	outFields->push(HX_("movedBack",fa,67,95,ea));
	outFields->push(HX_("selectedWeek",ef,7f,8f,df));
	outFields->push(HX_("stopspamming",e0,83,63,4e));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StoryMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,tracksSprite),HX_("tracksSprite",ad,d1,c0,2b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,book),HX_("book",29,84,1b,41)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,colorB),HX_("colorB",7f,c5,86,c6)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,curDifficulty),HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,txtWeekTitle),HX_("txtWeekTitle",74,f4,3f,69)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,bgSprite),HX_("bgSprite",aa,c7,9c,98)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,doko),HX_("doko",ef,ed,6d,42)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,txtTracklist),HX_("txtTracklist",d9,6f,f5,3e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpWeekText),HX_("grpWeekText",c6,97,1f,d2)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpWeekCharacters),HX_("grpWeekCharacters",83,fc,76,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpLocks),HX_("grpLocks",03,78,f1,5b)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,difficultySelectors),HX_("difficultySelectors",b9,fa,53,88)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,leftArrow),HX_("leftArrow",42,68,6f,3a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,rightArrow),HX_("rightArrow",4d,60,54,28)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(StoryMenuState_obj,loadedWeeks),HX_("loadedWeeks",ba,8b,e0,c1)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,movedBack),HX_("movedBack",fa,67,95,ea)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,selectedWeek),HX_("selectedWeek",ef,7f,8f,df)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,stopspamming),HX_("stopspamming",e0,83,63,4e)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo StoryMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &StoryMenuState_obj::weekCompleted,HX_("weekCompleted",f7,82,ec,84)},
	{::hx::fsString,(void *) &StoryMenuState_obj::lastDifficultyName,HX_("lastDifficultyName",1c,ef,d1,9b)},
	{::hx::fsInt,(void *) &StoryMenuState_obj::curWeek,HX_("curWeek",94,d1,0a,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String StoryMenuState_obj_sMemberFields[] = {
	HX_("tracksSprite",ad,d1,c0,2b),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("book",29,84,1b,41),
	HX_("colorB",7f,c5,86,c6),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("txtWeekTitle",74,f4,3f,69),
	HX_("bgSprite",aa,c7,9c,98),
	HX_("doko",ef,ed,6d,42),
	HX_("txtTracklist",d9,6f,f5,3e),
	HX_("grpWeekText",c6,97,1f,d2),
	HX_("grpWeekCharacters",83,fc,76,59),
	HX_("grpLocks",03,78,f1,5b),
	HX_("difficultySelectors",b9,fa,53,88),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("leftArrow",42,68,6f,3a),
	HX_("rightArrow",4d,60,54,28),
	HX_("loadedWeeks",ba,8b,e0,c1),
	HX_("create",fc,66,0f,7c),
	HX_("closeSubState",49,18,32,04),
	HX_("update",09,86,05,87),
	HX_("movedBack",fa,67,95,ea),
	HX_("selectedWeek",ef,7f,8f,df),
	HX_("stopspamming",e0,83,63,4e),
	HX_("selectWeek",10,d5,90,bd),
	HX_("changeDifficulty",cb,0f,40,d4),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("changeWeek",84,95,3e,29),
	HX_("weekIsLocked",a8,d0,e6,fb),
	HX_("updateText",56,b7,ae,05),
	::String(null()) };

static void StoryMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StoryMenuState_obj::weekCompleted,"weekCompleted");
	HX_MARK_MEMBER_NAME(StoryMenuState_obj::lastDifficultyName,"lastDifficultyName");
	HX_MARK_MEMBER_NAME(StoryMenuState_obj::curWeek,"curWeek");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StoryMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StoryMenuState_obj::weekCompleted,"weekCompleted");
	HX_VISIT_MEMBER_NAME(StoryMenuState_obj::lastDifficultyName,"lastDifficultyName");
	HX_VISIT_MEMBER_NAME(StoryMenuState_obj::curWeek,"curWeek");
};

#endif

::hx::Class StoryMenuState_obj::__mClass;

static ::String StoryMenuState_obj_sStaticFields[] = {
	HX_("weekCompleted",f7,82,ec,84),
	HX_("lastDifficultyName",1c,ef,d1,9b),
	HX_("curWeek",94,d1,0a,ba),
	::String(null())
};

void StoryMenuState_obj::__register()
{
	StoryMenuState_obj _hx_dummy;
	StoryMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.StoryMenuState",09,2f,42,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StoryMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &StoryMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = StoryMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StoryMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StoryMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StoryMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StoryMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StoryMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StoryMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StoryMenuState_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_21_boot)
HXDLIN(  21)		weekCompleted =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_29_boot)
HXDLIN(  29)		lastDifficultyName = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_38_boot)
HXDLIN(  38)		curWeek = 0;
            	}
}

} // end namespace states
