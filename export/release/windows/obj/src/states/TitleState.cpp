// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hxvlc_flixel_FlxVideo
#include <hxvlc/flixel/FlxVideo.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Video
#include <hxvlc/openfl/Video.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_shaders_ColorSwap
#include <shaders/ColorSwap.h>
#endif
#ifndef INCLUDED_shaders_ColorSwapShader
#include <shaders/ColorSwapShader.h>
#endif
#ifndef INCLUDED_states_FlashingState
#include <states/FlashingState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tjson_TJSON
#include <tjson/TJSON.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f4f54134d4f9e667_42_new,"states.TitleState","new",0x1a057497,"states.TitleState.new","states/TitleState.hx",42,0xa989be18)
static const int _hx_array_data_81c3dd25_1[] = {
	(int)30,(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,
};
static const int _hx_array_data_81c3dd25_2[] = {
	(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,
};
static const Float _hx_array_data_81c3dd25_3[] = {
	(Float)1,.64,
};
static const int _hx_array_data_81c3dd25_4[] = {
	(int)-13369345,(int)-13421620,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_76_create,"states.TitleState","create",0x5256ff25,"states.TitleState.create","states/TitleState.hx",76,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_128_addIntroElements,"states.TitleState","addIntroElements",0x7dccab4b,"states.TitleState.addIntroElements","states/TitleState.hx",128,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_203_startVideo,"states.TitleState","startVideo",0xdc744d62,"states.TitleState.startVideo","states/TitleState.hx",203,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_215_startVideo,"states.TitleState","startVideo",0xdc744d62,"states.TitleState.startVideo","states/TitleState.hx",215,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_227_startVideo,"states.TitleState","startVideo",0xdc744d62,"states.TitleState.startVideo","states/TitleState.hx",227,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_236_startVideo,"states.TitleState","startVideo",0xdc744d62,"states.TitleState.startVideo","states/TitleState.hx",236,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_256_startIntro,"states.TitleState","startIntro",0x63990353,"states.TitleState.startIntro","states/TitleState.hx",256,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_248_startIntro,"states.TitleState","startIntro",0x63990353,"states.TitleState.startIntro","states/TitleState.hx",248,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_265_startIntro,"states.TitleState","startIntro",0x63990353,"states.TitleState.startIntro","states/TitleState.hx",265,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_288_loadJsonData,"states.TitleState","loadJsonData",0xa85781a1,"states.TitleState.loadJsonData","states/TitleState.hx",288,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_324_easterEggData,"states.TitleState","easterEggData",0xb2d4e8fc,"states.TitleState.easterEggData","states/TitleState.hx",324,0xa989be18)
static const int _hx_array_data_81c3dd25_17[] = {
	(int)14,(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,
};
static const int _hx_array_data_81c3dd25_18[] = {
	(int)27,(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,
};
static const int _hx_array_data_81c3dd25_19[] = {
	(int)29,(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,
};
static const int _hx_array_data_81c3dd25_20[] = {
	(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_359_getIntroTextShit,"states.TitleState","getIntroTextShit",0xb448648c,"states.TitleState.getIntroTextShit","states/TitleState.hx",359,0xa989be18)
static const ::String _hx_array_data_81c3dd25_27[] = {
	HX_("Charzitian is a femboy",fa,4a,ea,96),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_386_update,"states.TitleState","update",0x5d4d1e32,"states.TitleState.update","states/TitleState.hx",386,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_452_update,"states.TitleState","update",0x5d4d1e32,"states.TitleState.update","states/TitleState.hx",452,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_548_update,"states.TitleState","update",0x5d4d1e32,"states.TitleState.update","states/TitleState.hx",548,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_559_createCoolText,"states.TitleState","createCoolText",0x558b345b,"states.TitleState.createCoolText","states/TitleState.hx",559,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_574_addMoreText,"states.TitleState","addMoreText",0x3373315a,"states.TitleState.addMoreText","states/TitleState.hx",574,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_585_deleteCoolText,"states.TitleState","deleteCoolText",0x5d27d48a,"states.TitleState.deleteCoolText","states/TitleState.hx",585,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_595_beatHit,"states.TitleState","beatHit",0x1c627634,"states.TitleState.beatHit","states/TitleState.hx",595,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_624_skipIntro,"states.TitleState","skipIntro",0x75bd5ee4,"states.TitleState.skipIntro","states/TitleState.hx",624,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_44_boot,"states.TitleState","boot",0xa2d9901b,"states.TitleState.boot","states/TitleState.hx",44,0xa989be18)
static const int _hx_array_data_81c3dd25_39[] = {
	(int)48,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_45_boot,"states.TitleState","boot",0xa2d9901b,"states.TitleState.boot","states/TitleState.hx",45,0xa989be18)
static const int _hx_array_data_81c3dd25_41[] = {
	(int)109,(int)189,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_46_boot,"states.TitleState","boot",0xa2d9901b,"states.TitleState.boot","states/TitleState.hx",46,0xa989be18)
static const int _hx_array_data_81c3dd25_43[] = {
	(int)107,(int)187,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_48_boot,"states.TitleState","boot",0xa2d9901b,"states.TitleState.boot","states/TitleState.hx",48,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_380_boot,"states.TitleState","boot",0xa2d9901b,"states.TitleState.boot","states/TitleState.hx",380,0xa989be18)
HX_LOCAL_STACK_FRAME(_hx_pos_f4f54134d4f9e667_593_boot,"states.TitleState","boot",0xa2d9901b,"states.TitleState.boot","states/TitleState.hx",593,0xa989be18)
namespace states{

void TitleState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_42_new)
HXLINE( 621)		this->increaseVolume = false;
HXLINE( 620)		this->skippedIntro = false;
HXLINE( 592)		this->sickBeats = 0;
HXLINE( 383)		this->titleTimer = ((Float)0);
HXLINE( 382)		this->newTitle = false;
HXLINE( 379)		this->transitioning = false;
HXLINE( 284)		this->danceRightFrames = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_1,16);
HXLINE( 283)		this->danceLeftFrames = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_2,15);
HXLINE( 282)		this->musicBPM = ((Float)102);
HXLINE( 281)		this->useIdle = false;
HXLINE( 279)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(100,576);
HXDLIN( 279)		point->_inPool = false;
HXDLIN( 279)		this->enterPosition = point;
HXLINE( 278)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(-150,-100);
HXDLIN( 278)		point1->_inPool = false;
HXDLIN( 278)		this->logoPosition = point1;
HXLINE( 277)		 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(512,40);
HXDLIN( 277)		point2->_inPool = false;
HXDLIN( 277)		this->gfPosition = point2;
HXLINE( 275)		this->animationName = HX_("gfDance",94,88,3a,eb);
HXLINE( 274)		this->characterImage = HX_("gfDanceTitle",64,64,d2,7b);
HXLINE( 126)		this->swagShader = null();
HXLINE( 124)		this->danceLeft = false;
HXLINE(  72)		this->introVideo = null();
HXLINE(  59)		this->curWacky = ::Array_obj< ::String >::__new(0);
HXLINE(  57)		this->titleTextAlphas = ::Array_obj< Float >::fromData( _hx_array_data_81c3dd25_3,2);
HXLINE(  56)		this->titleTextColors = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_4,2);
HXLINE(  51)		this->textGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  50)		this->credGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  42)		super::__construct();
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x1b9a519f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1b9a519f;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void TitleState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_76_create)
HXLINE(  77)		::backend::Paths_obj::clearStoredMemory();
HXLINE(  78)		this->super::create();
HXLINE(  79)		::backend::Paths_obj::clearUnusedMemory();
HXLINE(  81)		if (!(::states::TitleState_obj::initialized)) {
HXLINE(  83)			::backend::ClientPrefs_obj::loadPrefs();
HXLINE(  84)			::backend::Language_obj::reloadPhrases();
            		}
HXLINE(  87)		 ::flixel::math::FlxRandom _hx_tmp = ::flixel::FlxG_obj::random;
HXDLIN(  87)		this->curWacky = _hx_tmp->getObject_Array_String(this->getIntroTextShit(),null(),null(),null());
HXLINE(  89)		if (!(::states::TitleState_obj::initialized)) {
HXLINE(  91)			bool _hx_tmp1;
HXDLIN(  91)			if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data )) {
HXLINE(  91)				_hx_tmp1 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("fullscreen",3b,3a,b4,f9),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(  91)				_hx_tmp1 = false;
            			}
HXDLIN(  91)			if (_hx_tmp1) {
HXLINE(  93)				::flixel::FlxG_obj::set_fullscreen(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("fullscreen",3b,3a,b4,f9),::hx::paccDynamic)) ));
            			}
HXLINE(  96)			this->persistentUpdate = true;
HXLINE(  97)			this->persistentDraw = true;
            		}
HXLINE( 100)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("weekCompleted",f7,82,ec,84),::hx::paccDynamic) )) {
HXLINE( 102)			::states::StoryMenuState_obj::weekCompleted = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("weekCompleted",f7,82,ec,84),::hx::paccDynamic)) );
            		}
HXLINE( 105)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 111)		bool _hx_tmp2;
HXDLIN( 111)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic) )) {
HXLINE( 111)			_hx_tmp2 = !(::states::FlashingState_obj::leftState);
            		}
            		else {
HXLINE( 111)			_hx_tmp2 = false;
            		}
HXDLIN( 111)		if (_hx_tmp2) {
HXLINE( 113)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 114)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE( 115)			::backend::MusicBeatState_obj::switchState( ::states::FlashingState_obj::__alloc( HX_CTX ));
            		}
            		else {
HXLINE( 118)			this->startIntro();
            		}
            	}


void TitleState_obj::addIntroElements(){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_128_addIntroElements)
HXLINE( 129)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 130)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 130)			_hx_tmp->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),0,null(),null());
            		}
HXLINE( 132)		this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->logoPosition->x,this->logoPosition->y,null());
HXLINE( 133)		::haxe::Log_obj::trace(HX_("Loading atlas: logoBumpin",53,34,5b,d1),::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),133,HX_("states.TitleState",25,dd,c3,81),HX_("addIntroElements",e2,e5,77,b5)));
HXLINE( 134)		 ::flixel::FlxSprite _hx_tmp1 = this->logoBl;
HXDLIN( 134)		::String parentFolder = null();
HXDLIN( 134)		if ((HX_("logoBumpin",26,cb,02,ab).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 134)			::haxe::Log_obj::trace(HX_("logoBumpin",26,cb,02,ab), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 134)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("logoBumpin",26,cb,02,ab),parentFolder,true);
HXDLIN( 134)		bool xmlExists = false;
HXDLIN( 134)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 134)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 134)			xmlExists = true;
            		}
HXDLIN( 134)		 ::Dynamic _hx_tmp2;
HXDLIN( 134)		if (xmlExists) {
HXLINE( 134)			_hx_tmp2 = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE( 134)			::String key = (HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab));
HXDLIN( 134)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 134)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 134)			if (::hx::IsNotNull( str )) {
HXLINE( 134)				key = str;
            			}
HXDLIN( 134)			_hx_tmp2 = ::backend::Paths_obj::getPath((key + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN( 134)		_hx_tmp1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp2));
HXLINE( 135)		this->logoBl->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 136)		this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,false,null(),null());
HXLINE( 137)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),null(),null(),null());
HXLINE( 138)		this->logoBl->updateHitbox();
HXLINE( 140)		this->gfDance =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->gfPosition->x,this->gfPosition->y,null());
HXLINE( 141)		this->gfDance->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 142)		if (::backend::ClientPrefs_obj::data->shaders) {
HXLINE( 144)			this->swagShader =  ::shaders::ColorSwap_obj::__alloc( HX_CTX );
HXLINE( 145)			this->gfDance->shader = this->swagShader->shader;
HXLINE( 146)			this->logoBl->shader = this->swagShader->shader;
            		}
HXLINE( 148)		::haxe::Log_obj::trace((HX_("Loading atlas: ",ed,9e,fd,d3) + this->characterImage),::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),148,HX_("states.TitleState",25,dd,c3,81),HX_("addIntroElements",e2,e5,77,b5)));
HXLINE( 149)		 ::flixel::FlxSprite _hx_tmp3 = this->gfDance;
HXDLIN( 149)		::String key1 = this->characterImage;
HXDLIN( 149)		::String parentFolder1 = null();
HXDLIN( 149)		if ((key1.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 149)			::haxe::Log_obj::trace(key1, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 149)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key1,parentFolder1,true);
HXDLIN( 149)		bool xmlExists1 = false;
HXDLIN( 149)		::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key1) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 149)		if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE( 149)			xmlExists1 = true;
            		}
HXDLIN( 149)		 ::Dynamic _hx_tmp4;
HXDLIN( 149)		if (xmlExists1) {
HXLINE( 149)			_hx_tmp4 = ::sys::io::File_obj::getContent(xml1);
            		}
            		else {
HXLINE( 149)			::String key2 = (HX_("images/",77,50,74,c1) + key1);
HXDLIN( 149)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 149)			::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN( 149)			if (::hx::IsNotNull( str1 )) {
HXLINE( 149)				key2 = str1;
            			}
HXDLIN( 149)			_hx_tmp4 = ::backend::Paths_obj::getPath((key2 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            		}
HXDLIN( 149)		_hx_tmp3->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp4));
HXLINE( 150)		if (!(this->useIdle)) {
HXLINE( 152)			this->gfDance->animation->addByIndices(HX_("danceLeft",da,cc,f9,df),this->animationName,this->danceLeftFrames,HX_("",00,00,00,00),24,false,null(),null());
HXLINE( 153)			this->gfDance->animation->addByIndices(HX_("danceRight",a9,7f,a6,91),this->animationName,this->danceRightFrames,HX_("",00,00,00,00),24,false,null(),null());
HXLINE( 154)			this->gfDance->animation->play(HX_("danceRight",a9,7f,a6,91),null(),null(),null());
            		}
            		else {
HXLINE( 158)			this->gfDance->animation->addByPrefix(HX_("idle",14,a7,b3,45),this->animationName,24,false,null(),null());
HXLINE( 159)			this->gfDance->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
HXLINE( 162)		::Array< ::Dynamic> animFrames = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 163)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->enterPosition->x,this->enterPosition->y,null());
HXLINE( 164)		::haxe::Log_obj::trace(HX_("Loading atlas: titleEnter",8d,e9,c3,a8),::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),164,HX_("states.TitleState",25,dd,c3,81),HX_("addIntroElements",e2,e5,77,b5)));
HXLINE( 165)		 ::flixel::FlxSprite _hx_tmp5 = this->titleText;
HXDLIN( 165)		::String parentFolder2 = null();
HXDLIN( 165)		if ((HX_("titleEnter",60,80,6b,82).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 165)			::haxe::Log_obj::trace(HX_("titleEnter",60,80,6b,82), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder2)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 165)		 ::flixel::graphics::FlxGraphic imageLoaded2 = ::backend::Paths_obj::image(HX_("titleEnter",60,80,6b,82),parentFolder2,true);
HXDLIN( 165)		bool xmlExists2 = false;
HXDLIN( 165)		::String xml2 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 165)		if (::sys::FileSystem_obj::exists(xml2)) {
HXLINE( 165)			xmlExists2 = true;
            		}
HXDLIN( 165)		 ::Dynamic _hx_tmp6;
HXDLIN( 165)		if (xmlExists2) {
HXLINE( 165)			_hx_tmp6 = ::sys::io::File_obj::getContent(xml2);
            		}
            		else {
HXLINE( 165)			::String key3 = (HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82));
HXDLIN( 165)			::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN( 165)			::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 165)			if (::hx::IsNotNull( str2 )) {
HXLINE( 165)				key3 = str2;
            			}
HXDLIN( 165)			_hx_tmp6 = ::backend::Paths_obj::getPath((key3 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder2,null());
            		}
HXDLIN( 165)		_hx_tmp5->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded2,_hx_tmp6));
HXLINE( 167)		{
HXLINE( 168)			this->titleText->animation->findByPrefix(animFrames,HX_("ENTER IDLE",3c,57,01,7a),null());
HXLINE( 169)			this->titleText->animation->findByPrefix(animFrames,HX_("ENTER FREEZE",7f,78,5c,d6),null());
            		}
HXLINE( 171)		if ((this->newTitle = (animFrames->length > 0))) {
HXLINE( 173)			this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("ENTER IDLE",3c,57,01,7a),24,null(),null(),null());
HXLINE( 174)			::String _hx_tmp7;
HXDLIN( 174)			if (::backend::ClientPrefs_obj::data->flashing) {
HXLINE( 174)				_hx_tmp7 = HX_("ENTER PRESSED",5a,47,9f,63);
            			}
            			else {
HXLINE( 174)				_hx_tmp7 = HX_("ENTER FREEZE",7f,78,5c,d6);
            			}
HXDLIN( 174)			this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),_hx_tmp7,24,null(),null(),null());
            		}
            		else {
HXLINE( 178)			this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE( 179)			this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
            		}
HXLINE( 181)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 182)		this->titleText->updateHitbox();
HXLINE( 184)		this->blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 185)		{
HXLINE( 185)			 ::flixel::math::FlxBasePoint this4 = this->blackScreen->scale;
HXDLIN( 185)			Float y = ( (Float)(::flixel::FlxG_obj::height) );
HXDLIN( 185)			this4->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 185)			this4->set_y(y);
            		}
HXLINE( 186)		this->blackScreen->updateHitbox();
HXLINE( 187)		this->credGroup->add(this->blackScreen).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 189)		this->credTextShit =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("",00,00,00,00),true);
HXLINE( 190)		{
HXLINE( 190)			 ::objects::Alphabet _this = this->credTextShit;
HXDLIN( 190)			int axes = 17;
HXDLIN( 190)			bool _hx_tmp8;
HXDLIN( 190)			if ((axes != 1)) {
HXLINE( 190)				_hx_tmp8 = (axes == 17);
            			}
            			else {
HXLINE( 190)				_hx_tmp8 = true;
            			}
HXDLIN( 190)			if (_hx_tmp8) {
HXLINE( 190)				int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN( 190)				_this->set_x(((( (Float)(_hx_tmp9) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 190)			bool _hx_tmp10;
HXDLIN( 190)			if ((axes != 16)) {
HXLINE( 190)				_hx_tmp10 = (axes == 17);
            			}
            			else {
HXLINE( 190)				_hx_tmp10 = true;
            			}
HXDLIN( 190)			if (_hx_tmp10) {
HXLINE( 190)				int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN( 190)				_this->set_y(((( (Float)(_hx_tmp11) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 191)		this->credTextShit->set_visible(false);
HXLINE( 193)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.52)),null());
HXDLIN( 193)		this->ngSpr = _hx_tmp12->loadGraphic(::backend::Paths_obj::image(HX_("newgrounds_logo",1e,5c,8d,a6),null(),null()),null(),null(),null(),null(),null());
HXLINE( 194)		this->ngSpr->set_visible(false);
HXLINE( 195)		 ::flixel::FlxSprite _hx_tmp13 = this->ngSpr;
HXDLIN( 195)		_hx_tmp13->setGraphicSize(::Std_obj::_hx_int((this->ngSpr->get_width() * ((Float)0.8))),null());
HXLINE( 196)		this->ngSpr->updateHitbox();
HXLINE( 197)		{
HXLINE( 197)			 ::flixel::FlxSprite _this1 = this->ngSpr;
HXDLIN( 197)			int axes1 = 1;
HXDLIN( 197)			bool _hx_tmp14;
HXDLIN( 197)			if ((axes1 != 1)) {
HXLINE( 197)				_hx_tmp14 = (axes1 == 17);
            			}
            			else {
HXLINE( 197)				_hx_tmp14 = true;
            			}
HXDLIN( 197)			if (_hx_tmp14) {
HXLINE( 197)				int _hx_tmp15 = ::flixel::FlxG_obj::width;
HXDLIN( 197)				_this1->set_x(((( (Float)(_hx_tmp15) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 197)			bool _hx_tmp16;
HXDLIN( 197)			if ((axes1 != 16)) {
HXLINE( 197)				_hx_tmp16 = (axes1 == 17);
            			}
            			else {
HXLINE( 197)				_hx_tmp16 = true;
            			}
HXDLIN( 197)			if (_hx_tmp16) {
HXLINE( 197)				int _hx_tmp17 = ::flixel::FlxG_obj::height;
HXDLIN( 197)				_this1->set_y(((( (Float)(_hx_tmp17) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 198)		this->ngSpr->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,addIntroElements,(void))

void TitleState_obj::startVideo(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_203_startVideo)
HXDLIN( 203)		 ::states::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 205)		this->persistentUpdate = false;
HXLINE( 206)		this->persistentDraw = false;
HXLINE( 208)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 209)			::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
            		}
HXLINE( 211)		::String filepath = ::backend::Paths_obj::video(name);
HXLINE( 212)		 ::hxvlc::flixel::FlxVideo video =  ::hxvlc::flixel::FlxVideo_obj::__alloc( HX_CTX ,null());
HXLINE( 214)		if (video->load(filepath,null())) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::hxvlc::flixel::FlxVideo,video, ::states::TitleState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_215_startVideo)
HXLINE( 216)				video->stop();
HXLINE( 217)				if (::hx::IsNotNull( video->parent )) {
HXLINE( 217)					video->parent->removeChild(video);
            				}
            				else {
HXLINE( 218)					if (::openfl::Lib_obj::get_current()->stage->contains(video)) {
HXLINE( 218)						::openfl::Lib_obj::get_current()->stage->removeChild(video);
            					}
            				}
HXLINE( 219)				video->dispose();
HXLINE( 221)				_gthis->introVideo = null();
HXLINE( 224)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 224)				_hx_tmp->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),((Float)0.7),null(),null());
HXLINE( 225)				_gthis->persistentUpdate = true;
HXLINE( 226)				_gthis->persistentDraw = true;
HXLINE( 227)				{
HXLINE( 227)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
HXDLIN( 227)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 227)					bool _hx_tmp1;
HXDLIN( 227)					if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 227)						_hx_tmp1 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            					}
            					else {
HXLINE( 227)						_hx_tmp1 = true;
            					}
HXDLIN( 227)					if (_hx_tmp1) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_227_startVideo)
HXLINE( 227)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 227)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE( 227)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 227)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 215)			video->onEndReached->add( ::Dynamic(new _hx_Closure_1(video,_gthis)),null(),null());
HXLINE( 229)			::openfl::Lib_obj::get_current()->stage->addChild(video);
HXLINE( 230)			video->play();
HXLINE( 232)			this->introVideo = video;
            		}
            		else {
HXLINE( 235)			::haxe::Log_obj::trace(HX_("Failed to load video.",cb,8a,7b,16),::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),235,HX_("states.TitleState",25,dd,c3,81),HX_("startVideo",b9,ec,12,53)));
HXLINE( 236)			{
HXLINE( 236)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
HXDLIN( 236)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 236)				bool _hx_tmp;
HXDLIN( 236)				if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 236)					_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            				}
            				else {
HXLINE( 236)					_hx_tmp = true;
            				}
HXDLIN( 236)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_236_startVideo)
HXLINE( 236)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 236)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE( 236)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 236)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_2(nextState,stateOnCall)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TitleState_obj,startVideo,(void))

void TitleState_obj::startIntro(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_256_startIntro)
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_248_startIntro)
HXDLIN( 248)		 ::states::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 249)		this->persistentUpdate = true;
HXLINE( 251)		this->loadJsonData();
HXLINE( 253)		::backend::Conductor_obj::set_bpm(this->musicBPM);
HXLINE( 255)		 ::Dynamic boom =  ::Dynamic(new _hx_Closure_0());
HXLINE( 260)		if (::states::TitleState_obj::initialized) {
HXLINE( 261)			boom();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::TitleState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_265_startIntro)
HXLINE( 266)				_gthis->startVideo(HX_("innerslothIntro",78,7a,47,f8));
HXLINE( 267)				::haxe::Log_obj::trace(HX_("starting video...",b3,a0,8b,c0),::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),267,HX_("states.TitleState",25,dd,c3,81),HX_("startIntro",aa,a2,37,da)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 264)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,startIntro,(void))

void TitleState_obj::loadJsonData(){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_288_loadJsonData)
HXDLIN( 288)		if (::backend::Paths_obj::fileExists(HX_("images/gfDanceTitle.json",1b,dc,af,fc),HX_("TEXT",ad,94,ba,37),null(),null())) {
HXLINE( 290)			::String path = ::backend::Paths_obj::getPath(HX_("images/gfDanceTitle.json",1b,dc,af,fc),HX_("TEXT",ad,94,ba,37),null(),true);
HXDLIN( 290)			::String titleRaw;
HXDLIN( 290)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 290)				titleRaw = ::sys::io::File_obj::getContent(path);
            			}
            			else {
HXLINE( 290)				titleRaw = null();
            			}
HXLINE( 291)			bool _hx_tmp;
HXDLIN( 291)			if (::hx::IsNotNull( titleRaw )) {
HXLINE( 291)				_hx_tmp = (titleRaw.length > 0);
            			}
            			else {
HXLINE( 291)				_hx_tmp = false;
            			}
HXDLIN( 291)			if (_hx_tmp) {
HXLINE( 293)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 295)					 ::Dynamic titleJSON = ::tjson::TJSON_obj::parse(titleRaw,null(),null());
HXLINE( 296)					{
HXLINE( 296)						 ::flixel::math::FlxBasePoint this1 = this->gfPosition;
HXDLIN( 296)						Float y = ( (Float)(titleJSON->__Field(HX_("gfy",7a,81,4e,00),::hx::paccDynamic)) );
HXDLIN( 296)						this1->set_x(( (Float)(titleJSON->__Field(HX_("gfx",79,81,4e,00),::hx::paccDynamic)) ));
HXDLIN( 296)						this1->set_y(y);
            					}
HXLINE( 297)					{
HXLINE( 297)						 ::flixel::math::FlxBasePoint this2 = this->logoPosition;
HXDLIN( 297)						Float y1 = ( (Float)(titleJSON->__Field(HX_("titley",e1,cf,77,23),::hx::paccDynamic)) );
HXDLIN( 297)						this2->set_x(( (Float)(titleJSON->__Field(HX_("titlex",e0,cf,77,23),::hx::paccDynamic)) ));
HXDLIN( 297)						this2->set_y(y1);
            					}
HXLINE( 298)					{
HXLINE( 298)						 ::flixel::math::FlxBasePoint this3 = this->enterPosition;
HXDLIN( 298)						Float y2 = ( (Float)(titleJSON->__Field(HX_("starty",d7,61,fa,05),::hx::paccDynamic)) );
HXDLIN( 298)						this3->set_x(( (Float)(titleJSON->__Field(HX_("startx",d6,61,fa,05),::hx::paccDynamic)) ));
HXDLIN( 298)						this3->set_y(y2);
            					}
HXLINE( 299)					this->musicBPM = ( (Float)(titleJSON->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 301)					bool _hx_tmp1;
HXDLIN( 301)					if (::hx::IsNotNull( titleJSON->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic) )) {
HXLINE( 301)						_hx_tmp1 = (( (::String)(titleJSON->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic)) ).length > 0);
            					}
            					else {
HXLINE( 301)						_hx_tmp1 = false;
            					}
HXDLIN( 301)					if (_hx_tmp1) {
HXLINE( 301)						this->animationName = ( (::String)(titleJSON->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic)) );
            					}
HXLINE( 302)					bool _hx_tmp2;
HXDLIN( 302)					if (::hx::IsNotNull( titleJSON->__Field(HX_("dance_left",d3,27,d6,0f),::hx::paccDynamic) )) {
HXLINE( 302)						_hx_tmp2 = (( (::Array< int >)(titleJSON->__Field(HX_("dance_left",d3,27,d6,0f),::hx::paccDynamic)) )->length > 0);
            					}
            					else {
HXLINE( 302)						_hx_tmp2 = false;
            					}
HXDLIN( 302)					if (_hx_tmp2) {
HXLINE( 302)						this->danceLeftFrames = ( (::Array< int >)(titleJSON->__Field(HX_("dance_left",d3,27,d6,0f),::hx::paccDynamic)) );
            					}
HXLINE( 303)					bool _hx_tmp3;
HXDLIN( 303)					if (::hx::IsNotNull( titleJSON->__Field(HX_("dance_right",90,be,99,42),::hx::paccDynamic) )) {
HXLINE( 303)						_hx_tmp3 = (( (::Array< int >)(titleJSON->__Field(HX_("dance_right",90,be,99,42),::hx::paccDynamic)) )->length > 0);
            					}
            					else {
HXLINE( 303)						_hx_tmp3 = false;
            					}
HXDLIN( 303)					if (_hx_tmp3) {
HXLINE( 303)						this->danceRightFrames = ( (::Array< int >)(titleJSON->__Field(HX_("dance_right",90,be,99,42),::hx::paccDynamic)) );
            					}
HXLINE( 304)					this->useIdle = ::hx::IsEq( titleJSON->__Field(HX_("idle",14,a7,b3,45),::hx::paccDynamic),true );
HXLINE( 306)					bool _hx_tmp4;
HXDLIN( 306)					if (::hx::IsNotNull( titleJSON->__Field(HX_("backgroundSprite",93,8a,2c,8e),::hx::paccDynamic) )) {
HXLINE( 306)						_hx_tmp4 = (::StringTools_obj::trim(( (::String)(titleJSON->__Field(HX_("backgroundSprite",93,8a,2c,8e),::hx::paccDynamic)) )).length > 0);
            					}
            					else {
HXLINE( 306)						_hx_tmp4 = false;
            					}
HXDLIN( 306)					if (_hx_tmp4) {
HXLINE( 308)						 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 308)						 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(( (::String)(titleJSON->__Field(HX_("backgroundSprite",93,8a,2c,8e),::hx::paccDynamic)) ),null(),null()),null(),null(),null(),null(),null());
HXLINE( 309)						bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 310)						this->add(bg1);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 313)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 315)						{
HXLINE( 315)							 ::Dynamic _hx_tmp5 = ::haxe::Log_obj::trace;
HXDLIN( 315)							::String _hx_tmp6 = (HX_("[WARN] Title JSON might broken, ignoring issue...\n",e2,0f,b3,6c) + e->details());
HXDLIN( 315)							_hx_tmp5(_hx_tmp6,::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),315,HX_("states.TitleState",25,dd,c3,81),HX_("loadJsonData",b8,e4,5d,fb)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			else {
HXLINE( 318)				::haxe::Log_obj::trace(HX_("[WARN] No Title JSON detected, using default values.",a6,15,ba,39),::hx::SourceInfo(HX_("source/states/TitleState.hx",0c,7f,4b,d4),318,HX_("states.TitleState",25,dd,c3,81),HX_("loadJsonData",b8,e4,5d,fb)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,loadJsonData,(void))

void TitleState_obj::easterEggData(){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_324_easterEggData)
HXLINE( 325)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("psychDevsEasterEgg",22,2b,1d,02),::hx::paccDynamic) )) {
HXLINE( 325)			::flixel::FlxG_obj::save->data->__SetField(HX_("psychDevsEasterEgg",22,2b,1d,02),HX_("",00,00,00,00),::hx::paccDynamic);
            		}
HXLINE( 326)		::String easterEgg = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("psychDevsEasterEgg",22,2b,1d,02),::hx::paccDynamic)) );
HXLINE( 327)		::String _hx_switch_0 = easterEgg.toUpperCase();
            		if (  (_hx_switch_0==HX_("BBPANZU",78,33,57,57)) ){
HXLINE( 342)			this->characterImage = HX_("BBBump",d6,55,f9,8f);
HXLINE( 343)			this->animationName = HX_("BB Title Bump",1e,7a,fc,18);
HXLINE( 344)			this->danceLeftFrames = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_17,14);
HXLINE( 345)			this->danceRightFrames = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_18,15);
HXLINE( 346)			this->gfPosition->set_x((this->gfPosition->x + 45));
HXLINE( 347)			this->gfPosition->set_y((this->gfPosition->y + 100));
HXLINE( 341)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("PESSY",e4,64,e9,3d)) ){
HXLINE( 349)			this->characterImage = HX_("PessyBump",fa,1a,fc,fc);
HXLINE( 350)			this->animationName = HX_("Pessy Title Bump",7a,61,24,0d);
HXLINE( 351)			this->gfPosition->set_x((this->gfPosition->x + 165));
HXLINE( 352)			this->gfPosition->set_y((this->gfPosition->y + 60));
HXLINE( 353)			this->danceLeftFrames = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_19,16);
HXLINE( 354)			this->danceRightFrames = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_20,14);
HXLINE( 348)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("RIVEREN",55,72,3d,34)) ){
HXLINE( 336)			this->characterImage = HX_("ZRiverBump",68,21,ca,fd);
HXLINE( 337)			this->animationName = HX_("River Title Bump",72,50,b8,9a);
HXLINE( 338)			this->gfPosition->set_x((this->gfPosition->x + 180));
HXLINE( 339)			this->gfPosition->set_y((this->gfPosition->y + 40));
HXLINE( 340)			this->useIdle = true;
HXLINE( 335)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("SHADOW",e0,73,a3,cf)) ){
HXLINE( 330)			this->characterImage = HX_("ShadowBump",16,78,fc,06);
HXLINE( 331)			this->animationName = HX_("Shadow Title Bump",de,1f,1e,d8);
HXLINE( 332)			this->gfPosition->set_x((this->gfPosition->x + 210));
HXLINE( 333)			this->gfPosition->set_y((this->gfPosition->y + 40));
HXLINE( 334)			this->useIdle = true;
HXLINE( 329)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,easterEggData,(void))

::Array< ::Dynamic> TitleState_obj::getIntroTextShit(){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_359_getIntroTextShit)
HXLINE( 361)		::String defaultDirectory = null();
HXDLIN( 361)		bool allowDuplicates = false;
HXDLIN( 361)		if (::hx::IsNull( defaultDirectory )) {
HXLINE( 361)			defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
            		}
HXDLIN( 361)		defaultDirectory = ::StringTools_obj::trim(defaultDirectory);
HXDLIN( 361)		if (!(::StringTools_obj::endsWith(defaultDirectory,HX_("/",2f,00,00,00)))) {
HXLINE( 361)			defaultDirectory = (defaultDirectory + HX_("/",2f,00,00,00));
            		}
HXDLIN( 361)		if (!(::StringTools_obj::startsWith(defaultDirectory,HX_("assets/",4c,2a,dc,36)))) {
HXLINE( 361)			defaultDirectory = (HX_("assets/",4c,2a,dc,36) + defaultDirectory);
            		}
HXDLIN( 361)		::Array< ::String > mergedList = ::Array_obj< ::String >::__new(0);
HXDLIN( 361)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN( 361)		if (::sys::FileSystem_obj::exists((defaultDirectory + HX_("data/introText.txt",d6,92,cf,a9)))) {
HXLINE( 361)			foldersToCheck->push((defaultDirectory + HX_("data/introText.txt",d6,92,cf,a9)));
            		}
HXDLIN( 361)		bool _hx_tmp;
HXDLIN( 361)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 361)			_hx_tmp = (::backend::Paths_obj::currentLevel != defaultDirectory);
            		}
            		else {
HXLINE( 361)			_hx_tmp = false;
            		}
HXDLIN( 361)		if (_hx_tmp) {
HXLINE( 361)			::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN( 361)			if (::hx::IsNull( folder )) {
HXLINE( 361)				folder = HX_("shared",a5,5e,2b,1d);
            			}
HXDLIN( 361)			::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + HX_("data/introText.txt",d6,92,cf,a9));
HXDLIN( 361)			bool _hx_tmp1;
HXDLIN( 361)			if (!(foldersToCheck->contains(pth))) {
HXLINE( 361)				_hx_tmp1 = ::sys::FileSystem_obj::exists(pth);
            			}
            			else {
HXLINE( 361)				_hx_tmp1 = false;
            			}
HXDLIN( 361)			if (_hx_tmp1) {
HXLINE( 361)				foldersToCheck->push(pth);
            			}
            		}
HXDLIN( 361)		{
HXLINE( 361)			{
HXLINE( 361)				int _g = 0;
HXDLIN( 361)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 361)				while((_g < _g1->length)){
HXLINE( 361)					::String mod = _g1->__get(_g);
HXDLIN( 361)					_g = (_g + 1);
HXDLIN( 361)					::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("data/introText.txt",d6,92,cf,a9));
HXDLIN( 361)					if (::hx::IsNull( key )) {
HXLINE( 361)						key = HX_("",00,00,00,00);
            					}
HXDLIN( 361)					::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN( 361)					bool _hx_tmp2;
HXDLIN( 361)					if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE( 361)						_hx_tmp2 = !(foldersToCheck->contains(folder1));
            					}
            					else {
HXLINE( 361)						_hx_tmp2 = false;
            					}
HXDLIN( 361)					if (_hx_tmp2) {
HXLINE( 361)						foldersToCheck->push(folder1);
            					}
            				}
            			}
HXDLIN( 361)			::String key1 = HX_("data/introText.txt",d6,92,cf,a9);
HXDLIN( 361)			if (::hx::IsNull( key1 )) {
HXLINE( 361)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN( 361)			::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN( 361)			bool _hx_tmp3;
HXDLIN( 361)			if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE( 361)				_hx_tmp3 = !(foldersToCheck->contains(folder2));
            			}
            			else {
HXLINE( 361)				_hx_tmp3 = false;
            			}
HXDLIN( 361)			if (_hx_tmp3) {
HXLINE( 361)				::String key2 = HX_("data/introText.txt",d6,92,cf,a9);
HXDLIN( 361)				if (::hx::IsNull( key2 )) {
HXLINE( 361)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN( 361)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
HXDLIN( 361)			bool _hx_tmp4;
HXDLIN( 361)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 361)				_hx_tmp4 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE( 361)				_hx_tmp4 = false;
            			}
HXDLIN( 361)			if (_hx_tmp4) {
HXLINE( 361)				::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("data/introText.txt",d6,92,cf,a9));
HXDLIN( 361)				if (::hx::IsNull( key3 )) {
HXLINE( 361)					key3 = HX_("",00,00,00,00);
            				}
HXDLIN( 361)				::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN( 361)				bool _hx_tmp5;
HXDLIN( 361)				if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE( 361)					_hx_tmp5 = !(foldersToCheck->contains(folder3));
            				}
            				else {
HXLINE( 361)					_hx_tmp5 = false;
            				}
HXDLIN( 361)				if (_hx_tmp5) {
HXLINE( 361)					foldersToCheck->push(folder3);
            				}
            			}
            		}
HXDLIN( 361)		::Array< ::String > paths = foldersToCheck;
HXDLIN( 361)		::String defaultPath = (defaultDirectory + HX_("data/introText.txt",d6,92,cf,a9));
HXDLIN( 361)		if (paths->contains(defaultPath)) {
HXLINE( 361)			paths->remove(defaultPath);
HXDLIN( 361)			paths->insert(0,defaultPath);
            		}
HXDLIN( 361)		{
HXLINE( 361)			int _g2 = 0;
HXDLIN( 361)			while((_g2 < paths->length)){
HXLINE( 361)				::String file = paths->__get(_g2);
HXDLIN( 361)				_g2 = (_g2 + 1);
HXDLIN( 361)				::String daList = null();
HXDLIN( 361)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 361)					daList = ::sys::io::File_obj::getContent(file);
            				}
HXDLIN( 361)				::Array< ::String > list;
HXDLIN( 361)				if (::hx::IsNotNull( daList )) {
HXLINE( 361)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 361)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXDLIN( 361)					{
HXLINE( 361)						int _g3 = 0;
HXDLIN( 361)						int _g4 = daList1->length;
HXDLIN( 361)						while((_g3 < _g4)){
HXLINE( 361)							_g3 = (_g3 + 1);
HXDLIN( 361)							int i = (_g3 - 1);
HXDLIN( 361)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN( 361)					list = daList1;
            				}
            				else {
HXLINE( 361)					list = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN( 361)				{
HXLINE( 361)					int _g5 = 0;
HXDLIN( 361)					while((_g5 < list->length)){
HXLINE( 361)						::String value = list->__get(_g5);
HXDLIN( 361)						_g5 = (_g5 + 1);
HXDLIN( 361)						bool _hx_tmp6;
HXDLIN( 361)						bool _hx_tmp7;
HXDLIN( 361)						if (!(allowDuplicates)) {
HXLINE( 361)							_hx_tmp7 = !(mergedList->contains(value));
            						}
            						else {
HXLINE( 361)							_hx_tmp7 = true;
            						}
HXDLIN( 361)						if (_hx_tmp7) {
HXLINE( 361)							_hx_tmp6 = (value.length > 0);
            						}
            						else {
HXLINE( 361)							_hx_tmp6 = false;
            						}
HXDLIN( 361)						if (_hx_tmp6) {
HXLINE( 361)							mergedList->push(value);
            						}
            					}
            				}
            			}
            		}
HXDLIN( 361)		::Array< ::String > firstArray = mergedList;
HXLINE( 366)		::Array< ::Dynamic> swagGoodArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 369)		swagGoodArray->push(::Array_obj< ::String >::fromData( _hx_array_data_81c3dd25_27,1));
HXLINE( 371)		{
HXLINE( 371)			int _g6 = 0;
HXDLIN( 371)			while((_g6 < firstArray->length)){
HXLINE( 371)				::String i1 = firstArray->__get(_g6);
HXDLIN( 371)				_g6 = (_g6 + 1);
HXLINE( 373)				swagGoodArray->push(i1.split(HX_("--",60,27,00,00)));
            			}
            		}
HXLINE( 376)		return swagGoodArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,getIntroTextShit,return )

void TitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_386_update)
HXLINE( 388)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 389)			::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 392)		bool pressedEnter;
HXDLIN( 392)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 392)		if (!(_this->keyManager->checkStatusUnsafe(13,_this->status))) {
HXLINE( 392)			pressedEnter = this->get_controls()->get_ACCEPT();
            		}
            		else {
HXLINE( 392)			pressedEnter = true;
            		}
HXLINE( 404)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 406)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 408)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this1 = gamepad->justPressed;
HXDLIN( 408)			int id = 7;
HXDLIN( 408)			 ::flixel::input::gamepad::FlxGamepad _this2 = _this1->gamepad;
HXDLIN( 408)			int Status = _this1->status;
HXDLIN( 408)			bool _hx_tmp;
HXDLIN( 408)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 408)					_hx_tmp = _this2->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 408)					_hx_tmp = !(_this2->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 408)					int RawID = _this2->mapping->getRawID(id);
HXDLIN( 408)					 ::flixel::input::gamepad::FlxGamepadButton button = _this2->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 408)					if (::hx::IsNotNull( button )) {
HXLINE( 408)						_hx_tmp = button->hasState(Status);
            					}
            					else {
HXLINE( 408)						_hx_tmp = false;
            					}
            				}
            			}
HXDLIN( 408)			if (_hx_tmp) {
HXLINE( 409)				pressedEnter = true;
            			}
            		}
HXLINE( 417)		if (this->newTitle) {
HXLINE( 418)			 ::states::TitleState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 418)			Float lowerBound;
HXDLIN( 418)			if ((elapsed < 0)) {
HXLINE( 418)				lowerBound = ( (Float)(0) );
            			}
            			else {
HXLINE( 418)				lowerBound = elapsed;
            			}
HXDLIN( 418)			Float _hx_tmp2;
HXDLIN( 418)			if ((lowerBound > 1)) {
HXLINE( 418)				_hx_tmp2 = ( (Float)(1) );
            			}
            			else {
HXLINE( 418)				_hx_tmp2 = lowerBound;
            			}
HXDLIN( 418)			_hx_tmp1->titleTimer = (_hx_tmp1->titleTimer + _hx_tmp2);
HXLINE( 419)			if ((this->titleTimer > 2)) {
HXLINE( 419)				 ::states::TitleState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 419)				_hx_tmp3->titleTimer = (_hx_tmp3->titleTimer - ( (Float)(2) ));
            			}
            		}
HXLINE( 424)		bool _hx_tmp4;
HXDLIN( 424)		bool _hx_tmp5;
HXDLIN( 424)		if (::states::TitleState_obj::initialized) {
HXLINE( 424)			_hx_tmp5 = !(this->transitioning);
            		}
            		else {
HXLINE( 424)			_hx_tmp5 = false;
            		}
HXDLIN( 424)		if (_hx_tmp5) {
HXLINE( 424)			_hx_tmp4 = this->skippedIntro;
            		}
            		else {
HXLINE( 424)			_hx_tmp4 = false;
            		}
HXDLIN( 424)		if (_hx_tmp4) {
HXLINE( 426)			bool _hx_tmp6;
HXDLIN( 426)			if (this->newTitle) {
HXLINE( 426)				_hx_tmp6 = !(pressedEnter);
            			}
            			else {
HXLINE( 426)				_hx_tmp6 = false;
            			}
HXDLIN( 426)			if (_hx_tmp6) {
HXLINE( 428)				Float timer = this->titleTimer;
HXLINE( 429)				if ((timer >= 1)) {
HXLINE( 430)					timer = (-(timer) + 2);
            				}
HXLINE( 432)				Float t = timer;
HXDLIN( 432)				if ((t <= ((Float).5))) {
HXLINE( 432)					timer = ((t * t) * ( (Float)(2) ));
            				}
            				else {
HXLINE( 432)					t = (t - ( (Float)(1) ));
HXDLIN( 432)					timer = (( (Float)(1) ) - ((t * t) * ( (Float)(2) )));
            				}
HXLINE( 434)				 ::flixel::FlxSprite _hx_tmp7 = this->titleText;
HXDLIN( 434)				int Color1 = this->titleTextColors->__get(0);
HXDLIN( 434)				int Color2 = this->titleTextColors->__get(1);
HXDLIN( 434)				int r = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 16) & 255) - ((Color1 >> 16) & 255))) ) * timer) + ((Color1 >> 16) & 255)));
HXDLIN( 434)				int g = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 8) & 255) - ((Color1 >> 8) & 255))) ) * timer) + ((Color1 >> 8) & 255)));
HXDLIN( 434)				int b = ::Std_obj::_hx_int(((( (Float)(((Color2 & 255) - (Color1 & 255))) ) * timer) + (Color1 & 255)));
HXDLIN( 434)				int a = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 24) & 255) - ((Color1 >> 24) & 255))) ) * timer) + ((Color1 >> 24) & 255)));
HXDLIN( 434)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 434)				{
HXLINE( 434)					color = (color & -16711681);
HXDLIN( 434)					int color1;
HXDLIN( 434)					if ((r > 255)) {
HXLINE( 434)						color1 = 255;
            					}
            					else {
HXLINE( 434)						if ((r < 0)) {
HXLINE( 434)							color1 = 0;
            						}
            						else {
HXLINE( 434)							color1 = r;
            						}
            					}
HXDLIN( 434)					color = (color | (color1 << 16));
            				}
HXDLIN( 434)				{
HXLINE( 434)					color = (color & -65281);
HXDLIN( 434)					int color2;
HXDLIN( 434)					if ((g > 255)) {
HXLINE( 434)						color2 = 255;
            					}
            					else {
HXLINE( 434)						if ((g < 0)) {
HXLINE( 434)							color2 = 0;
            						}
            						else {
HXLINE( 434)							color2 = g;
            						}
            					}
HXDLIN( 434)					color = (color | (color2 << 8));
            				}
HXDLIN( 434)				{
HXLINE( 434)					color = (color & -256);
HXDLIN( 434)					int color3;
HXDLIN( 434)					if ((b > 255)) {
HXLINE( 434)						color3 = 255;
            					}
            					else {
HXLINE( 434)						if ((b < 0)) {
HXLINE( 434)							color3 = 0;
            						}
            						else {
HXLINE( 434)							color3 = b;
            						}
            					}
HXDLIN( 434)					color = (color | color3);
            				}
HXDLIN( 434)				{
HXLINE( 434)					color = (color & 16777215);
HXDLIN( 434)					int color4;
HXDLIN( 434)					if ((a > 255)) {
HXLINE( 434)						color4 = 255;
            					}
            					else {
HXLINE( 434)						if ((a < 0)) {
HXLINE( 434)							color4 = 0;
            						}
            						else {
HXLINE( 434)							color4 = a;
            						}
            					}
HXDLIN( 434)					color = (color | (color4 << 24));
            				}
HXDLIN( 434)				_hx_tmp7->set_color(color);
HXLINE( 435)				Float a1 = this->titleTextAlphas->__get(0);
HXDLIN( 435)				this->titleText->set_alpha((a1 + (timer * (this->titleTextAlphas->__get(1) - a1))));
            			}
HXLINE( 438)			if (pressedEnter) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_452_update)
HXLINE( 453)					::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
HXLINE( 454)					::states::TitleState_obj::closedState = true;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 440)				this->titleText->set_color(-1);
HXLINE( 441)				this->titleText->set_alpha(( (Float)(1) ));
HXLINE( 443)				if (::hx::IsNotNull( this->titleText )) {
HXLINE( 443)					this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            				}
HXLINE( 445)				int _hx_tmp8;
HXDLIN( 445)				if (::backend::ClientPrefs_obj::data->flashing) {
HXLINE( 445)					_hx_tmp8 = -1;
            				}
            				else {
HXLINE( 445)					_hx_tmp8 = (int)1291845631;
            				}
HXDLIN( 445)				::flixel::FlxG_obj::camera->flash(_hx_tmp8,1,null(),null());
HXLINE( 446)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp9 = ::flixel::FlxG_obj::sound;
HXDLIN( 446)				_hx_tmp9->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("confirmMenu",bf,8e,fe,3c)),null(),true,null()),((Float)0.7),null(),null(),null(),null());
HXLINE( 448)				this->transitioning = true;
HXLINE( 451)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            			}
            		}
HXLINE( 512)		bool _hx_tmp10;
HXDLIN( 512)		bool _hx_tmp11;
HXDLIN( 512)		if (::states::TitleState_obj::initialized) {
HXLINE( 512)			_hx_tmp11 = pressedEnter;
            		}
            		else {
HXLINE( 512)			_hx_tmp11 = false;
            		}
HXDLIN( 512)		if (_hx_tmp11) {
HXLINE( 512)			_hx_tmp10 = !(this->skippedIntro);
            		}
            		else {
HXLINE( 512)			_hx_tmp10 = false;
            		}
HXDLIN( 512)		if (_hx_tmp10) {
HXLINE( 514)			this->skipIntro();
            		}
HXLINE( 517)		if (::hx::IsNotNull( this->swagShader )) {
HXLINE( 519)			if (this->get_controls()->get_UI_LEFT()) {
HXLINE( 519)				 ::shaders::ColorSwap fh = this->swagShader;
HXDLIN( 519)				fh->set_hue((fh->hue - (elapsed * ((Float)0.1))));
            			}
HXLINE( 520)			if (this->get_controls()->get_UI_RIGHT()) {
HXLINE( 520)				 ::shaders::ColorSwap fh1 = this->swagShader;
HXDLIN( 520)				fh1->set_hue((fh1->hue + (elapsed * ((Float)0.1))));
            			}
            		}
HXLINE( 525)		bool _hx_tmp12;
HXDLIN( 525)		if (::hx::IsNotNull( this->introVideo )) {
HXLINE( 525)			_hx_tmp12 = ::hx::IsNotNull( this->introVideo->parent );
            		}
            		else {
HXLINE( 525)			_hx_tmp12 = false;
            		}
HXDLIN( 525)		if (_hx_tmp12) {
HXLINE( 526)			int stageW = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXLINE( 527)			int stageH = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXLINE( 528)			int vidW = 1920;
HXLINE( 529)			int vidH = 1080;
HXLINE( 530)			bool _hx_tmp13;
HXDLIN( 530)			if ((vidW > 0)) {
HXLINE( 530)				_hx_tmp13 = (vidH > 0);
            			}
            			else {
HXLINE( 530)				_hx_tmp13 = false;
            			}
HXDLIN( 530)			if (_hx_tmp13) {
HXLINE( 531)				Float scale = ::Math_obj::min((( (Float)(stageW) ) / ( (Float)(vidW) )),(( (Float)(stageH) ) / ( (Float)(vidH) )));
HXLINE( 532)				this->introVideo->set_width((( (Float)(vidW) ) * scale));
HXLINE( 533)				this->introVideo->set_height((( (Float)(vidH) ) * scale));
HXLINE( 534)				 ::hxvlc::flixel::FlxVideo _hx_tmp14 = this->introVideo;
HXDLIN( 534)				_hx_tmp14->set_x(((( (Float)(stageW) ) - this->introVideo->get_width()) / ( (Float)(2) )));
HXLINE( 535)				 ::hxvlc::flixel::FlxVideo _hx_tmp15 = this->introVideo;
HXDLIN( 535)				_hx_tmp15->set_y(((( (Float)(stageH) ) - this->introVideo->get_height()) / ( (Float)(2) )));
            			}
HXLINE( 539)			bool _hx_tmp16;
HXDLIN( 539)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 539)			if (!(_this3->keyManager->checkStatusUnsafe(13,_this3->status))) {
HXLINE( 539)				_hx_tmp16 = this->get_controls()->get_ACCEPT();
            			}
            			else {
HXLINE( 539)				_hx_tmp16 = true;
            			}
HXDLIN( 539)			if (_hx_tmp16) {
HXLINE( 540)				this->introVideo->stop();
HXLINE( 541)				if (::hx::IsNotNull( this->introVideo->parent )) {
HXLINE( 541)					this->introVideo->parent->removeChild(this->introVideo);
            				}
            				else {
HXLINE( 542)					if (::openfl::Lib_obj::get_current()->stage->contains(this->introVideo)) {
HXLINE( 542)						::openfl::Lib_obj::get_current()->stage->removeChild(this->introVideo);
            					}
            				}
HXLINE( 543)				this->introVideo->dispose();
HXLINE( 544)				this->introVideo = null();
HXLINE( 545)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp17 = ::flixel::FlxG_obj::sound;
HXDLIN( 545)				_hx_tmp17->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),((Float)0.7),null(),null());
HXLINE( 546)				this->persistentUpdate = true;
HXLINE( 547)				this->persistentDraw = true;
HXLINE( 548)				{
HXLINE( 548)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
HXDLIN( 548)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 548)					bool _hx_tmp18;
HXDLIN( 548)					if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 548)						_hx_tmp18 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            					}
            					else {
HXLINE( 548)						_hx_tmp18 = true;
            					}
HXDLIN( 548)					if (_hx_tmp18) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_548_update)
HXLINE( 548)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 548)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE( 548)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 548)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            					}
            				}
HXLINE( 549)				return;
            			}
            		}
HXLINE( 554)		this->super::update(elapsed);
            	}


void TitleState_obj::createCoolText(::Array< ::String > textArray, ::Dynamic __o_offset){
            		 ::Dynamic offset = __o_offset;
            		if (::hx::IsNull(__o_offset)) offset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_559_createCoolText)
HXDLIN( 559)		int _g = 0;
HXDLIN( 559)		int _g1 = textArray->length;
HXDLIN( 559)		while((_g < _g1)){
HXDLIN( 559)			_g = (_g + 1);
HXDLIN( 559)			int i = (_g - 1);
HXLINE( 561)			 ::objects::Alphabet money =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),textArray->__get(i),true);
HXLINE( 562)			{
HXLINE( 562)				int axes = 1;
HXDLIN( 562)				bool _hx_tmp;
HXDLIN( 562)				if ((axes != 1)) {
HXLINE( 562)					_hx_tmp = (axes == 17);
            				}
            				else {
HXLINE( 562)					_hx_tmp = true;
            				}
HXDLIN( 562)				if (_hx_tmp) {
HXLINE( 562)					int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 562)					money->set_x(((( (Float)(_hx_tmp1) ) - money->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 562)				bool _hx_tmp2;
HXDLIN( 562)				if ((axes != 16)) {
HXLINE( 562)					_hx_tmp2 = (axes == 17);
            				}
            				else {
HXLINE( 562)					_hx_tmp2 = true;
            				}
HXDLIN( 562)				if (_hx_tmp2) {
HXLINE( 562)					int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 562)					money->set_y(((( (Float)(_hx_tmp3) ) - money->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 563)			money->set_y((money->y + (((i * 60) + 200) + offset)));
HXLINE( 564)			bool _hx_tmp4;
HXDLIN( 564)			if (::hx::IsNotNull( this->credGroup )) {
HXLINE( 564)				_hx_tmp4 = ::hx::IsNotNull( this->textGroup );
            			}
            			else {
HXLINE( 564)				_hx_tmp4 = false;
            			}
HXDLIN( 564)			if (_hx_tmp4) {
HXLINE( 566)				this->credGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 567)				this->textGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TitleState_obj,createCoolText,(void))

void TitleState_obj::addMoreText(::String text, ::Dynamic __o_offset){
            		 ::Dynamic offset = __o_offset;
            		if (::hx::IsNull(__o_offset)) offset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_f4f54134d4f9e667_574_addMoreText)
HXDLIN( 574)		bool _hx_tmp;
HXDLIN( 574)		if (::hx::IsNotNull( this->textGroup )) {
HXDLIN( 574)			_hx_tmp = ::hx::IsNotNull( this->credGroup );
            		}
            		else {
HXDLIN( 574)			_hx_tmp = false;
            		}
HXDLIN( 574)		if (_hx_tmp) {
HXLINE( 575)			 ::objects::Alphabet coolText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),text,true);
HXLINE( 576)			{
HXLINE( 576)				int axes = 1;
HXDLIN( 576)				bool _hx_tmp1;
HXDLIN( 576)				if ((axes != 1)) {
HXLINE( 576)					_hx_tmp1 = (axes == 17);
            				}
            				else {
HXLINE( 576)					_hx_tmp1 = true;
            				}
HXDLIN( 576)				if (_hx_tmp1) {
HXLINE( 576)					int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 576)					coolText->set_x(((( (Float)(_hx_tmp2) ) - coolText->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 576)				bool _hx_tmp3;
HXDLIN( 576)				if ((axes != 16)) {
HXLINE( 576)					_hx_tmp3 = (axes == 17);
            				}
            				else {
HXLINE( 576)					_hx_tmp3 = true;
            				}
HXDLIN( 576)				if (_hx_tmp3) {
HXLINE( 576)					int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 576)					coolText->set_y(((( (Float)(_hx_tmp4) ) - coolText->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 577)			coolText->set_y((coolText->y + (((this->textGroup->length * 60) + 200) + offset)));
HXLINE( 578)			this->credGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 579)			this->textGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TitleState_obj,addMoreText,(void))

void TitleState_obj::deleteCoolText(){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_585_deleteCoolText)
HXDLIN( 585)		while((this->textGroup->members->get_length() > 0)){
HXLINE( 587)			this->credGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 588)			this->textGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,deleteCoolText,(void))

void TitleState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_595_beatHit)
HXLINE( 596)		this->super::beatHit();
HXLINE( 598)		if (::hx::IsNotNull( this->logoBl )) {
HXLINE( 599)			this->logoBl->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
            		}
HXLINE( 601)		if (::hx::IsNotNull( this->gfDance )) {
HXLINE( 603)			this->danceLeft = !(this->danceLeft);
HXLINE( 604)			if (!(this->useIdle)) {
HXLINE( 606)				if (this->danceLeft) {
HXLINE( 607)					this->gfDance->animation->play(HX_("danceRight",a9,7f,a6,91),null(),null(),null());
            				}
            				else {
HXLINE( 609)					this->gfDance->animation->play(HX_("danceLeft",da,cc,f9,df),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 611)				if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 611)					this->gfDance->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            				}
            			}
            		}
HXLINE( 614)		if (!(::states::TitleState_obj::closedState)) {
HXLINE( 616)			this->sickBeats++;
            		}
            	}


void TitleState_obj::skipIntro(){
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_624_skipIntro)
HXDLIN( 624)		if (!(this->skippedIntro)) {
HXLINE( 684)			{
HXLINE( 685)				this->remove(this->ngSpr,null());
HXLINE( 686)				this->remove(this->credGroup,null());
HXLINE( 687)				::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
HXLINE( 689)				::String easteregg = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("psychDevsEasterEgg",22,2b,1d,02),::hx::paccDynamic)) );
HXLINE( 690)				if (::hx::IsNull( easteregg )) {
HXLINE( 690)					easteregg = HX_("",00,00,00,00);
            				}
HXLINE( 691)				easteregg = easteregg.toUpperCase();
            			}
HXLINE( 703)			this->skippedIntro = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,skipIntro,(void))

::Array< int > TitleState_obj::muteKeys;

::Array< int > TitleState_obj::volumeDownKeys;

::Array< int > TitleState_obj::volumeUpKeys;

bool TitleState_obj::initialized;

bool TitleState_obj::playJingle;

bool TitleState_obj::closedState;


::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new() {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "states.TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(credGroup,"credGroup");
	HX_MARK_MEMBER_NAME(textGroup,"textGroup");
	HX_MARK_MEMBER_NAME(blackScreen,"blackScreen");
	HX_MARK_MEMBER_NAME(credTextShit,"credTextShit");
	HX_MARK_MEMBER_NAME(ngSpr,"ngSpr");
	HX_MARK_MEMBER_NAME(titleTextColors,"titleTextColors");
	HX_MARK_MEMBER_NAME(titleTextAlphas,"titleTextAlphas");
	HX_MARK_MEMBER_NAME(curWacky,"curWacky");
	HX_MARK_MEMBER_NAME(wackyImage,"wackyImage");
	HX_MARK_MEMBER_NAME(introVideo,"introVideo");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(swagShader,"swagShader");
	HX_MARK_MEMBER_NAME(characterImage,"characterImage");
	HX_MARK_MEMBER_NAME(animationName,"animationName");
	HX_MARK_MEMBER_NAME(gfPosition,"gfPosition");
	HX_MARK_MEMBER_NAME(logoPosition,"logoPosition");
	HX_MARK_MEMBER_NAME(enterPosition,"enterPosition");
	HX_MARK_MEMBER_NAME(useIdle,"useIdle");
	HX_MARK_MEMBER_NAME(musicBPM,"musicBPM");
	HX_MARK_MEMBER_NAME(danceLeftFrames,"danceLeftFrames");
	HX_MARK_MEMBER_NAME(danceRightFrames,"danceRightFrames");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(newTitle,"newTitle");
	HX_MARK_MEMBER_NAME(titleTimer,"titleTimer");
	HX_MARK_MEMBER_NAME(sickBeats,"sickBeats");
	HX_MARK_MEMBER_NAME(skippedIntro,"skippedIntro");
	HX_MARK_MEMBER_NAME(increaseVolume,"increaseVolume");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(credGroup,"credGroup");
	HX_VISIT_MEMBER_NAME(textGroup,"textGroup");
	HX_VISIT_MEMBER_NAME(blackScreen,"blackScreen");
	HX_VISIT_MEMBER_NAME(credTextShit,"credTextShit");
	HX_VISIT_MEMBER_NAME(ngSpr,"ngSpr");
	HX_VISIT_MEMBER_NAME(titleTextColors,"titleTextColors");
	HX_VISIT_MEMBER_NAME(titleTextAlphas,"titleTextAlphas");
	HX_VISIT_MEMBER_NAME(curWacky,"curWacky");
	HX_VISIT_MEMBER_NAME(wackyImage,"wackyImage");
	HX_VISIT_MEMBER_NAME(introVideo,"introVideo");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(swagShader,"swagShader");
	HX_VISIT_MEMBER_NAME(characterImage,"characterImage");
	HX_VISIT_MEMBER_NAME(animationName,"animationName");
	HX_VISIT_MEMBER_NAME(gfPosition,"gfPosition");
	HX_VISIT_MEMBER_NAME(logoPosition,"logoPosition");
	HX_VISIT_MEMBER_NAME(enterPosition,"enterPosition");
	HX_VISIT_MEMBER_NAME(useIdle,"useIdle");
	HX_VISIT_MEMBER_NAME(musicBPM,"musicBPM");
	HX_VISIT_MEMBER_NAME(danceLeftFrames,"danceLeftFrames");
	HX_VISIT_MEMBER_NAME(danceRightFrames,"danceRightFrames");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(newTitle,"newTitle");
	HX_VISIT_MEMBER_NAME(titleTimer,"titleTimer");
	HX_VISIT_MEMBER_NAME(sickBeats,"sickBeats");
	HX_VISIT_MEMBER_NAME(skippedIntro,"skippedIntro");
	HX_VISIT_MEMBER_NAME(increaseVolume,"increaseVolume");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { return ::hx::Val( ngSpr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"useIdle") ) { return ::hx::Val( useIdle ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { return ::hx::Val( curWacky ); }
		if (HX_FIELD_EQ(inName,"musicBPM") ) { return ::hx::Val( musicBPM ); }
		if (HX_FIELD_EQ(inName,"newTitle") ) { return ::hx::Val( newTitle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { return ::hx::Val( credGroup ); }
		if (HX_FIELD_EQ(inName,"textGroup") ) { return ::hx::Val( textGroup ); }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"sickBeats") ) { return ::hx::Val( sickBeats ); }
		if (HX_FIELD_EQ(inName,"skipIntro") ) { return ::hx::Val( skipIntro_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { return ::hx::Val( wackyImage ); }
		if (HX_FIELD_EQ(inName,"introVideo") ) { return ::hx::Val( introVideo ); }
		if (HX_FIELD_EQ(inName,"swagShader") ) { return ::hx::Val( swagShader ); }
		if (HX_FIELD_EQ(inName,"startVideo") ) { return ::hx::Val( startVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"gfPosition") ) { return ::hx::Val( gfPosition ); }
		if (HX_FIELD_EQ(inName,"titleTimer") ) { return ::hx::Val( titleTimer ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { return ::hx::Val( blackScreen ); }
		if (HX_FIELD_EQ(inName,"addMoreText") ) { return ::hx::Val( addMoreText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { return ::hx::Val( credTextShit ); }
		if (HX_FIELD_EQ(inName,"logoPosition") ) { return ::hx::Val( logoPosition ); }
		if (HX_FIELD_EQ(inName,"loadJsonData") ) { return ::hx::Val( loadJsonData_dyn() ); }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { return ::hx::Val( skippedIntro ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animationName") ) { return ::hx::Val( animationName ); }
		if (HX_FIELD_EQ(inName,"enterPosition") ) { return ::hx::Val( enterPosition ); }
		if (HX_FIELD_EQ(inName,"easterEggData") ) { return ::hx::Val( easterEggData_dyn() ); }
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"characterImage") ) { return ::hx::Val( characterImage ); }
		if (HX_FIELD_EQ(inName,"createCoolText") ) { return ::hx::Val( createCoolText_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteCoolText") ) { return ::hx::Val( deleteCoolText_dyn() ); }
		if (HX_FIELD_EQ(inName,"increaseVolume") ) { return ::hx::Val( increaseVolume ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"titleTextColors") ) { return ::hx::Val( titleTextColors ); }
		if (HX_FIELD_EQ(inName,"titleTextAlphas") ) { return ::hx::Val( titleTextAlphas ); }
		if (HX_FIELD_EQ(inName,"danceLeftFrames") ) { return ::hx::Val( danceLeftFrames ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addIntroElements") ) { return ::hx::Val( addIntroElements_dyn() ); }
		if (HX_FIELD_EQ(inName,"danceRightFrames") ) { return ::hx::Val( danceRightFrames ); }
		if (HX_FIELD_EQ(inName,"getIntroTextShit") ) { return ::hx::Val( getIntroTextShit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TitleState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { outValue = ( muteKeys ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playJingle") ) { outValue = ( playJingle ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
		if (HX_FIELD_EQ(inName,"closedState") ) { outValue = ( closedState ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { outValue = ( volumeUpKeys ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { outValue = ( volumeDownKeys ); return true; }
	}
	return false;
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { ngSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useIdle") ) { useIdle=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { curWacky=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"musicBPM") ) { musicBPM=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newTitle") ) { newTitle=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { credGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textGroup") ) { textGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sickBeats") ) { sickBeats=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { wackyImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"introVideo") ) { introVideo=inValue.Cast<  ::hxvlc::flixel::FlxVideo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagShader") ) { swagShader=inValue.Cast<  ::shaders::ColorSwap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfPosition") ) { gfPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleTimer") ) { titleTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { blackScreen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { credTextShit=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoPosition") ) { logoPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { skippedIntro=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"animationName") ) { animationName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enterPosition") ) { enterPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"characterImage") ) { characterImage=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"increaseVolume") ) { increaseVolume=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"titleTextColors") ) { titleTextColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleTextAlphas") ) { titleTextAlphas=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeftFrames") ) { danceLeftFrames=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"danceRightFrames") ) { danceRightFrames=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TitleState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { muteKeys=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playJingle") ) { playJingle=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"closedState") ) { closedState=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { volumeUpKeys=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { volumeDownKeys=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("credGroup",91,7f,9c,9c));
	outFields->push(HX_("textGroup",52,43,e2,32));
	outFields->push(HX_("blackScreen",8b,de,f4,5d));
	outFields->push(HX_("credTextShit",fb,55,c1,3c));
	outFields->push(HX_("ngSpr",7c,26,68,9a));
	outFields->push(HX_("titleTextColors",f5,4d,ff,7e));
	outFields->push(HX_("titleTextAlphas",9a,53,b4,fa));
	outFields->push(HX_("curWacky",67,31,c6,0c));
	outFields->push(HX_("wackyImage",d4,7e,d6,81));
	outFields->push(HX_("introVideo",6f,72,77,1d));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("swagShader",4f,e1,a0,28));
	outFields->push(HX_("characterImage",f2,ce,7a,93));
	outFields->push(HX_("animationName",6f,5f,4b,3b));
	outFields->push(HX_("gfPosition",e8,6d,d2,0e));
	outFields->push(HX_("logoPosition",34,df,81,16));
	outFields->push(HX_("enterPosition",e1,a1,89,9b));
	outFields->push(HX_("useIdle",fb,2e,5f,54));
	outFields->push(HX_("musicBPM",3a,bf,89,0d));
	outFields->push(HX_("danceLeftFrames",20,10,bc,05));
	outFields->push(HX_("danceRightFrames",2f,48,d5,cc));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("newTitle",18,59,85,33));
	outFields->push(HX_("titleTimer",0d,d3,1a,22));
	outFields->push(HX_("sickBeats",9f,58,9e,58));
	outFields->push(HX_("skippedIntro",9c,44,26,49));
	outFields->push(HX_("increaseVolume",3c,17,43,1a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleState_obj,credGroup),HX_("credGroup",91,7f,9c,9c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleState_obj,textGroup),HX_("textGroup",52,43,e2,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,blackScreen),HX_("blackScreen",8b,de,f4,5d)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(TitleState_obj,credTextShit),HX_("credTextShit",fb,55,c1,3c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,ngSpr),HX_("ngSpr",7c,26,68,9a)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(TitleState_obj,titleTextColors),HX_("titleTextColors",f5,4d,ff,7e)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(TitleState_obj,titleTextAlphas),HX_("titleTextAlphas",9a,53,b4,fa)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TitleState_obj,curWacky),HX_("curWacky",67,31,c6,0c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,wackyImage),HX_("wackyImage",d4,7e,d6,81)},
	{::hx::fsObject /*  ::hxvlc::flixel::FlxVideo */ ,(int)offsetof(TitleState_obj,introVideo),HX_("introVideo",6f,72,77,1d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::shaders::ColorSwap */ ,(int)offsetof(TitleState_obj,swagShader),HX_("swagShader",4f,e1,a0,28)},
	{::hx::fsString,(int)offsetof(TitleState_obj,characterImage),HX_("characterImage",f2,ce,7a,93)},
	{::hx::fsString,(int)offsetof(TitleState_obj,animationName),HX_("animationName",6f,5f,4b,3b)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(TitleState_obj,gfPosition),HX_("gfPosition",e8,6d,d2,0e)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(TitleState_obj,logoPosition),HX_("logoPosition",34,df,81,16)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(TitleState_obj,enterPosition),HX_("enterPosition",e1,a1,89,9b)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,useIdle),HX_("useIdle",fb,2e,5f,54)},
	{::hx::fsFloat,(int)offsetof(TitleState_obj,musicBPM),HX_("musicBPM",3a,bf,89,0d)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(TitleState_obj,danceLeftFrames),HX_("danceLeftFrames",20,10,bc,05)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(TitleState_obj,danceRightFrames),HX_("danceRightFrames",2f,48,d5,cc)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,newTitle),HX_("newTitle",18,59,85,33)},
	{::hx::fsFloat,(int)offsetof(TitleState_obj,titleTimer),HX_("titleTimer",0d,d3,1a,22)},
	{::hx::fsInt,(int)offsetof(TitleState_obj,sickBeats),HX_("sickBeats",9f,58,9e,58)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,skippedIntro),HX_("skippedIntro",9c,44,26,49)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,increaseVolume),HX_("increaseVolume",3c,17,43,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TitleState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::muteKeys,HX_("muteKeys",6d,5d,88,16)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::volumeDownKeys,HX_("volumeDownKeys",70,2f,58,0b)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::volumeUpKeys,HX_("volumeUpKeys",69,bb,f5,23)},
	{::hx::fsBool,(void *) &TitleState_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{::hx::fsBool,(void *) &TitleState_obj::playJingle,HX_("playJingle",45,b8,ae,c6)},
	{::hx::fsBool,(void *) &TitleState_obj::closedState,HX_("closedState",c5,ac,a4,98)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("credGroup",91,7f,9c,9c),
	HX_("textGroup",52,43,e2,32),
	HX_("blackScreen",8b,de,f4,5d),
	HX_("credTextShit",fb,55,c1,3c),
	HX_("ngSpr",7c,26,68,9a),
	HX_("titleTextColors",f5,4d,ff,7e),
	HX_("titleTextAlphas",9a,53,b4,fa),
	HX_("curWacky",67,31,c6,0c),
	HX_("wackyImage",d4,7e,d6,81),
	HX_("introVideo",6f,72,77,1d),
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("swagShader",4f,e1,a0,28),
	HX_("addIntroElements",e2,e5,77,b5),
	HX_("startVideo",b9,ec,12,53),
	HX_("startIntro",aa,a2,37,da),
	HX_("characterImage",f2,ce,7a,93),
	HX_("animationName",6f,5f,4b,3b),
	HX_("gfPosition",e8,6d,d2,0e),
	HX_("logoPosition",34,df,81,16),
	HX_("enterPosition",e1,a1,89,9b),
	HX_("useIdle",fb,2e,5f,54),
	HX_("musicBPM",3a,bf,89,0d),
	HX_("danceLeftFrames",20,10,bc,05),
	HX_("danceRightFrames",2f,48,d5,cc),
	HX_("loadJsonData",b8,e4,5d,fb),
	HX_("easterEggData",05,3a,65,05),
	HX_("getIntroTextShit",23,9f,f3,eb),
	HX_("transitioning",6d,6a,93,94),
	HX_("newTitle",18,59,85,33),
	HX_("titleTimer",0d,d3,1a,22),
	HX_("update",09,86,05,87),
	HX_("createCoolText",32,cb,41,41),
	HX_("addMoreText",23,fe,9f,87),
	HX_("deleteCoolText",61,6b,de,48),
	HX_("sickBeats",9f,58,9e,58),
	HX_("beatHit",7d,ea,04,74),
	HX_("skippedIntro",9c,44,26,49),
	HX_("increaseVolume",3c,17,43,1a),
	HX_("skipIntro",6d,37,1c,d2),
	::String(null()) };

static void TitleState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleState_obj::muteKeys,"muteKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::volumeDownKeys,"volumeDownKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::volumeUpKeys,"volumeUpKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::initialized,"initialized");
	HX_MARK_MEMBER_NAME(TitleState_obj::playJingle,"playJingle");
	HX_MARK_MEMBER_NAME(TitleState_obj::closedState,"closedState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleState_obj::muteKeys,"muteKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::volumeDownKeys,"volumeDownKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::volumeUpKeys,"volumeUpKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::initialized,"initialized");
	HX_VISIT_MEMBER_NAME(TitleState_obj::playJingle,"playJingle");
	HX_VISIT_MEMBER_NAME(TitleState_obj::closedState,"closedState");
};

#endif

::hx::Class TitleState_obj::__mClass;

static ::String TitleState_obj_sStaticFields[] = {
	HX_("muteKeys",6d,5d,88,16),
	HX_("volumeDownKeys",70,2f,58,0b),
	HX_("volumeUpKeys",69,bb,f5,23),
	HX_("initialized",14,f5,0f,37),
	HX_("playJingle",45,b8,ae,c6),
	HX_("closedState",c5,ac,a4,98),
	::String(null())
};

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.TitleState",25,dd,c3,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TitleState_obj::__GetStatic;
	__mClass->mSetStaticField = &TitleState_obj::__SetStatic;
	__mClass->mMarkFunc = TitleState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TitleState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TitleState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_44_boot)
HXDLIN(  44)		muteKeys = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_39,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_45_boot)
HXDLIN(  45)		volumeDownKeys = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_41,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_46_boot)
HXDLIN(  46)		volumeUpKeys = ::Array_obj< int >::fromData( _hx_array_data_81c3dd25_43,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_48_boot)
HXDLIN(  48)		initialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_380_boot)
HXDLIN( 380)		playJingle = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f4f54134d4f9e667_593_boot)
HXDLIN( 593)		closedState = false;
            	}
}

} // end namespace states
